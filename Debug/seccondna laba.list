
seccondna laba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800756c  0800756c  0000856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075dc  080075dc  000090fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080075dc  080075dc  000085dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e4  080075e4  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e4  080075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e8  080075e8  000085e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080075ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000144c  200000fc  080076e8  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  080076e8  00009548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e0c  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e24  00000000  00000000  00019f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a22  00000000  00000000  0001dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff5  00000000  00000000  0001e4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001317b  00000000  00000000  000364e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cfb  00000000  00000000  00049662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d235d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  000d23a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d5a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007554 	.word	0x08007554

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007554 	.word	0x08007554

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b988 	b.w	800050c <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	468e      	mov	lr, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d962      	bls.n	80002f0 <__udivmoddi4+0xdc>
 800022a:	fab2 f682 	clz	r6, r2
 800022e:	b14e      	cbz	r6, 8000244 <__udivmoddi4+0x30>
 8000230:	f1c6 0320 	rsb	r3, r6, #32
 8000234:	fa01 f806 	lsl.w	r8, r1, r6
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	40b7      	lsls	r7, r6
 800023e:	ea43 0808 	orr.w	r8, r3, r8
 8000242:	40b4      	lsls	r4, r6
 8000244:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000248:	fa1f fc87 	uxth.w	ip, r7
 800024c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000250:	0c23      	lsrs	r3, r4, #16
 8000252:	fb0e 8811 	mls	r8, lr, r1, r8
 8000256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025a:	fb01 f20c 	mul.w	r2, r1, ip
 800025e:	429a      	cmp	r2, r3
 8000260:	d909      	bls.n	8000276 <__udivmoddi4+0x62>
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	f101 30ff 	add.w	r0, r1, #4294967295
 8000268:	f080 80ea 	bcs.w	8000440 <__udivmoddi4+0x22c>
 800026c:	429a      	cmp	r2, r3
 800026e:	f240 80e7 	bls.w	8000440 <__udivmoddi4+0x22c>
 8000272:	3902      	subs	r1, #2
 8000274:	443b      	add	r3, r7
 8000276:	1a9a      	subs	r2, r3, r2
 8000278:	b2a3      	uxth	r3, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000286:	fb00 fc0c 	mul.w	ip, r0, ip
 800028a:	459c      	cmp	ip, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x8e>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f100 32ff 	add.w	r2, r0, #4294967295
 8000294:	f080 80d6 	bcs.w	8000444 <__udivmoddi4+0x230>
 8000298:	459c      	cmp	ip, r3
 800029a:	f240 80d3 	bls.w	8000444 <__udivmoddi4+0x230>
 800029e:	443b      	add	r3, r7
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a6:	eba3 030c 	sub.w	r3, r3, ip
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40f3      	lsrs	r3, r6
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xb6>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb0>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x14c>
 80002d2:	4573      	cmp	r3, lr
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xc8>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 8105 	bhi.w	80004e6 <__udivmoddi4+0x2d2>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4690      	mov	r8, r2
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e5      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002ea:	e9c5 4800 	strd	r4, r8, [r5]
 80002ee:	e7e2      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f000 8090 	beq.w	8000416 <__udivmoddi4+0x202>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f040 80a4 	bne.w	8000448 <__udivmoddi4+0x234>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	b280      	uxth	r0, r0
 800030a:	b2bc      	uxth	r4, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000312:	fb0e 221c 	mls	r2, lr, ip, r2
 8000316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031a:	fb04 f20c 	mul.w	r2, r4, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x11e>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x11c>
 800032a:	429a      	cmp	r2, r3
 800032c:	f200 80e0 	bhi.w	80004f0 <__udivmoddi4+0x2dc>
 8000330:	46c4      	mov	ip, r8
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	fbb3 f2fe 	udiv	r2, r3, lr
 8000338:	fb0e 3312 	mls	r3, lr, r2, r3
 800033c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000340:	fb02 f404 	mul.w	r4, r2, r4
 8000344:	429c      	cmp	r4, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x144>
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	f102 30ff 	add.w	r0, r2, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x142>
 8000350:	429c      	cmp	r4, r3
 8000352:	f200 80ca 	bhi.w	80004ea <__udivmoddi4+0x2d6>
 8000356:	4602      	mov	r2, r0
 8000358:	1b1b      	subs	r3, r3, r4
 800035a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x98>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa0e f401 	lsl.w	r4, lr, r1
 8000370:	fa20 f306 	lsr.w	r3, r0, r6
 8000374:	fa2e fe06 	lsr.w	lr, lr, r6
 8000378:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	fa1f fc87 	uxth.w	ip, r7
 8000386:	fbbe f0f9 	udiv	r0, lr, r9
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000390:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000394:	fb00 fe0c 	mul.w	lr, r0, ip
 8000398:	45a6      	cmp	lr, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1a0>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a6:	f080 809c 	bcs.w	80004e2 <__udivmoddi4+0x2ce>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f240 8099 	bls.w	80004e2 <__udivmoddi4+0x2ce>
 80003b0:	3802      	subs	r0, #2
 80003b2:	443c      	add	r4, r7
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	fa1f fe83 	uxth.w	lr, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003cc:	45a4      	cmp	ip, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1ce>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d6:	f080 8082 	bcs.w	80004de <__udivmoddi4+0x2ca>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d97f      	bls.n	80004de <__udivmoddi4+0x2ca>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ee:	4564      	cmp	r4, ip
 80003f0:	4673      	mov	r3, lr
 80003f2:	46e1      	mov	r9, ip
 80003f4:	d362      	bcc.n	80004bc <__udivmoddi4+0x2a8>
 80003f6:	d05f      	beq.n	80004b8 <__udivmoddi4+0x2a4>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x1fe>
 80003fa:	ebb8 0203 	subs.w	r2, r8, r3
 80003fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	fa22 f301 	lsr.w	r3, r2, r1
 800040a:	431e      	orrs	r6, r3
 800040c:	40cc      	lsrs	r4, r1
 800040e:	e9c5 6400 	strd	r6, r4, [r5]
 8000412:	2100      	movs	r1, #0
 8000414:	e74f      	b.n	80002b6 <__udivmoddi4+0xa2>
 8000416:	fbb1 fcf2 	udiv	ip, r1, r2
 800041a:	0c01      	lsrs	r1, r0, #16
 800041c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000420:	b280      	uxth	r0, r0
 8000422:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000426:	463b      	mov	r3, r7
 8000428:	4638      	mov	r0, r7
 800042a:	463c      	mov	r4, r7
 800042c:	46b8      	mov	r8, r7
 800042e:	46be      	mov	lr, r7
 8000430:	2620      	movs	r6, #32
 8000432:	fbb1 f1f7 	udiv	r1, r1, r7
 8000436:	eba2 0208 	sub.w	r2, r2, r8
 800043a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043e:	e766      	b.n	800030e <__udivmoddi4+0xfa>
 8000440:	4601      	mov	r1, r0
 8000442:	e718      	b.n	8000276 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e72c      	b.n	80002a2 <__udivmoddi4+0x8e>
 8000448:	f1c6 0220 	rsb	r2, r6, #32
 800044c:	fa2e f302 	lsr.w	r3, lr, r2
 8000450:	40b7      	lsls	r7, r6
 8000452:	40b1      	lsls	r1, r6
 8000454:	fa20 f202 	lsr.w	r2, r0, r2
 8000458:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045c:	430a      	orrs	r2, r1
 800045e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000462:	b2bc      	uxth	r4, r7
 8000464:	fb0e 3318 	mls	r3, lr, r8, r3
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb08 f904 	mul.w	r9, r8, r4
 8000472:	40b0      	lsls	r0, r6
 8000474:	4589      	cmp	r9, r1
 8000476:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047a:	b280      	uxth	r0, r0
 800047c:	d93e      	bls.n	80004fc <__udivmoddi4+0x2e8>
 800047e:	1879      	adds	r1, r7, r1
 8000480:	f108 3cff 	add.w	ip, r8, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x276>
 8000486:	4589      	cmp	r9, r1
 8000488:	d81f      	bhi.n	80004ca <__udivmoddi4+0x2b6>
 800048a:	eba1 0109 	sub.w	r1, r1, r9
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fb09 f804 	mul.w	r8, r9, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	b292      	uxth	r2, r2
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d229      	bcs.n	80004f8 <__udivmoddi4+0x2e4>
 80004a4:	18ba      	adds	r2, r7, r2
 80004a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004aa:	d2c4      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d2c2      	bcs.n	8000436 <__udivmoddi4+0x222>
 80004b0:	f1a9 0102 	sub.w	r1, r9, #2
 80004b4:	443a      	add	r2, r7
 80004b6:	e7be      	b.n	8000436 <__udivmoddi4+0x222>
 80004b8:	45f0      	cmp	r8, lr
 80004ba:	d29d      	bcs.n	80003f8 <__udivmoddi4+0x1e4>
 80004bc:	ebbe 0302 	subs.w	r3, lr, r2
 80004c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c4:	3801      	subs	r0, #1
 80004c6:	46e1      	mov	r9, ip
 80004c8:	e796      	b.n	80003f8 <__udivmoddi4+0x1e4>
 80004ca:	eba7 0909 	sub.w	r9, r7, r9
 80004ce:	4449      	add	r1, r9
 80004d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	e7db      	b.n	8000496 <__udivmoddi4+0x282>
 80004de:	4673      	mov	r3, lr
 80004e0:	e77f      	b.n	80003e2 <__udivmoddi4+0x1ce>
 80004e2:	4650      	mov	r0, sl
 80004e4:	e766      	b.n	80003b4 <__udivmoddi4+0x1a0>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e6fd      	b.n	80002e6 <__udivmoddi4+0xd2>
 80004ea:	443b      	add	r3, r7
 80004ec:	3a02      	subs	r2, #2
 80004ee:	e733      	b.n	8000358 <__udivmoddi4+0x144>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	443b      	add	r3, r7
 80004f6:	e71c      	b.n	8000332 <__udivmoddi4+0x11e>
 80004f8:	4649      	mov	r1, r9
 80004fa:	e79c      	b.n	8000436 <__udivmoddi4+0x222>
 80004fc:	eba1 0109 	sub.w	r1, r1, r9
 8000500:	46c4      	mov	ip, r8
 8000502:	fbb1 f9fe 	udiv	r9, r1, lr
 8000506:	fb09 f804 	mul.w	r8, r9, r4
 800050a:	e7c4      	b.n	8000496 <__udivmoddi4+0x282>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 f9c1 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f825 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8b7 	bl	8000690 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000522:	f006 fadb 	bl	8006adc <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f889 	bl	800063c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[] = "Aue bratva \r\n";
 800052a:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <main+0x50>)
 800052c:	463c      	mov	r4, r7
 800052e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000530:	c407      	stmia	r4!, {r0, r1, r2}
 8000532:	8023      	strh	r3, [r4, #0]

  while (1)
  {
	  HAL_UART_Transmit(&huart1, message, sizeof(message), 100);
 8000534:	4639      	mov	r1, r7
 8000536:	2364      	movs	r3, #100	@ 0x64
 8000538:	220e      	movs	r2, #14
 800053a:	480a      	ldr	r0, [pc, #40]	@ (8000564 <main+0x54>)
 800053c:	f002 fbd4 	bl	8002ce8 <HAL_UART_Transmit>
	  CDC_Transmit_FS(message, strlen(message));
 8000540:	463b      	mov	r3, r7
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe46 	bl	80001d4 <strlen>
 8000548:	4602      	mov	r2, r0
 800054a:	463b      	mov	r3, r7
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fb82 	bl	8006c58 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8000554:	2064      	movs	r0, #100	@ 0x64
 8000556:	f000 fa13 	bl	8000980 <HAL_Delay>
  {
 800055a:	bf00      	nop
 800055c:	e7ea      	b.n	8000534 <main+0x24>
 800055e:	bf00      	nop
 8000560:	0800756c 	.word	0x0800756c
 8000564:	20000118 	.word	0x20000118

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 ffc0 	bl	80074fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <SystemClock_Config+0xd0>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005dc:	2310      	movs	r3, #16
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005e0:	23c0      	movs	r3, #192	@ 0xc0
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fed1 	bl	8002398 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005fc:	f000 f862 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f934 	bl	8002888 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 f84d 	bl	80006c4 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	@ (800068c <MX_USART1_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_USART1_UART_Init+0x4c>)
 8000674:	f002 fae8 	bl	8002c48 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f821 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000118 	.word	0x20000118
 800068c:	40011000 	.word	0x40011000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_GPIO_Init+0x30>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <MX_GPIO_Init+0x30>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_GPIO_Init+0x30>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <HAL_MspInit+0x4c>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <HAL_MspInit+0x4c>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <HAL_MspInit+0x4c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <HAL_MspInit+0x4c>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	@ 0x40
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <HAL_UART_MspInit+0x84>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d12c      	bne.n	800079c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <HAL_UART_MspInit+0x88>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074a:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <HAL_UART_MspInit+0x88>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6453      	str	r3, [r2, #68]	@ 0x44
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_UART_MspInit+0x88>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_UART_MspInit+0x88>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <HAL_UART_MspInit+0x88>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_UART_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800077a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800078c:	2307      	movs	r3, #7
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <HAL_UART_MspInit+0x8c>)
 8000798:	f000 fa28 	bl	8000bec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40011000 	.word	0x40011000
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f89b 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <OTG_FS_IRQHandler+0x10>)
 8000816:	f000 fcb1 	bl	800117c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000e44 	.word	0x20000e44

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f006 fe49 	bl	800750c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe49 	bl	8000510 <main>
  bx  lr    
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800088c:	080075ec 	.word	0x080075ec
  ldr r2, =_sbss
 8000890:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000894:	20001548 	.word	0x20001548

08000898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f94f 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fefe 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f967 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f92f 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000160 	.word	0x20000160

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000160 	.word	0x20000160

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	@ (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff29 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff3e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff31 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	e159      	b.n	8000ebc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8148 	bne.w	8000eb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d005      	beq.n	8000c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d130      	bne.n	8000ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	091b      	lsrs	r3, r3, #4
 8000c8a:	f003 0201 	and.w	r2, r3, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d017      	beq.n	8000cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d123      	bne.n	8000d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	69b9      	ldr	r1, [r7, #24]
 8000d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0203 	and.w	r2, r3, #3
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80a2 	beq.w	8000eb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b57      	ldr	r3, [pc, #348]	@ (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a56      	ldr	r2, [pc, #344]	@ (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d82:	4b54      	ldr	r3, [pc, #336]	@ (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8e:	4a52      	ldr	r2, [pc, #328]	@ (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a49      	ldr	r2, [pc, #292]	@ (8000edc <HAL_GPIO_Init+0x2f0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x202>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a48      	ldr	r2, [pc, #288]	@ (8000ee0 <HAL_GPIO_Init+0x2f4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x1fe>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a47      	ldr	r2, [pc, #284]	@ (8000ee4 <HAL_GPIO_Init+0x2f8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x1fa>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a46      	ldr	r2, [pc, #280]	@ (8000ee8 <HAL_GPIO_Init+0x2fc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x1f6>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a45      	ldr	r2, [pc, #276]	@ (8000eec <HAL_GPIO_Init+0x300>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x1f2>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000dde:	2307      	movs	r3, #7
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x204>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4935      	ldr	r1, [pc, #212]	@ (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e32:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e5c:	4a24      	ldr	r2, [pc, #144]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e62:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f aea2 	bls.w	8000c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40013c00 	.word	0x40013c00

08000ef4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e101      	b.n	800110a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f005 ffe1 	bl	8006ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f34:	d102      	bne.n	8000f3c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fba4 	bl	800368e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7c1a      	ldrb	r2, [r3, #16]
 8000f4e:	f88d 2000 	strb.w	r2, [sp]
 8000f52:	3304      	adds	r3, #4
 8000f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f56:	f002 fa83 	bl	8003460 <USB_CoreInit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2202      	movs	r2, #2
 8000f64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0ce      	b.n	800110a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fb9c 	bl	80036b0 <USB_SetCurrentMode>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0bf      	b.n	800110a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e04a      	b.n	8001026 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3315      	adds	r3, #21
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3314      	adds	r3, #20
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	332e      	adds	r3, #46	@ 0x2e
 8000fcc:	4602      	mov	r2, r0
 8000fce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	3318      	adds	r3, #24
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	331c      	adds	r3, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	3320      	adds	r3, #32
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	3324      	adds	r3, #36	@ 0x24
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	3301      	adds	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3af      	bcc.n	8000f90 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e044      	b.n	80010c0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	791b      	ldrb	r3, [r3, #4]
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3b5      	bcc.n	8001036 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7c1a      	ldrb	r2, [r3, #16]
 80010d2:	f88d 2000 	strb.w	r2, [sp]
 80010d6:	3304      	adds	r3, #4
 80010d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010da:	f002 fb35 	bl	8003748 <USB_DevInit>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00c      	b.n	800110a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fb7f 	bl	8004806 <USB_DevDisconnect>

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_PCD_Start+0x1c>
 800112a:	2302      	movs	r3, #2
 800112c:	e022      	b.n	8001174 <HAL_PCD_Start+0x62>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001146:	2b01      	cmp	r3, #1
 8001148:	d105      	bne.n	8001156 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fa86 	bl	800366c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fb2d 	bl	80047c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b08d      	sub	sp, #52	@ 0x34
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fbeb 	bl	800496e <USB_GetMode>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 848c 	bne.w	8001ab8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fb4f 	bl	8004848 <USB_ReadInterrupts>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8482 	beq.w	8001ab6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fb3c 	bl	8004848 <USB_ReadInterrupts>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d107      	bne.n	80011ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f002 0202 	and.w	r2, r2, #2
 80011e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fb2a 	bl	8004848 <USB_ReadInterrupts>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d161      	bne.n	80012c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0210 	bic.w	r2, r2, #16
 800120c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f003 020f 	and.w	r2, r3, #15
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	3304      	adds	r3, #4
 800122c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001238:	d124      	bne.n	8001284 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d035      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	6a38      	ldr	r0, [r7, #32]
 800125a:	f003 f961 	bl	8004520 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126a:	441a      	add	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800127c:	441a      	add	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	e016      	b.n	80012b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800128a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800128e:	d110      	bne.n	80012b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001296:	2208      	movs	r2, #8
 8001298:	4619      	mov	r1, r3
 800129a:	6a38      	ldr	r0, [r7, #32]
 800129c:	f003 f940 	bl	8004520 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ac:	441a      	add	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0210 	orr.w	r2, r2, #16
 80012c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fabe 	bl	8004848 <USB_ReadInterrupts>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80012d6:	f040 80a7 	bne.w	8001428 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fac3 	bl	800486e <USB_ReadDevAllOutEpInterrupt>
 80012e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80012ea:	e099      	b.n	8001420 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 808e 	beq.w	8001414 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fae7 	bl	80048d6 <USB_ReadDevOutEPInterrupt>
 8001308:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	015a      	lsls	r2, r3, #5
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	4413      	add	r3, r2
 800131c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001320:	461a      	mov	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fea3 	bl	8002074 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	015a      	lsls	r2, r3, #5
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	4413      	add	r3, r2
 8001340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001344:	461a      	mov	r2, r3
 8001346:	2308      	movs	r3, #8
 8001348:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800134a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 ff79 	bl	8002244 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	015a      	lsls	r2, r3, #5
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4413      	add	r3, r2
 8001364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001368:	461a      	mov	r2, r3
 800136a:	2310      	movs	r3, #16
 800136c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d030      	beq.n	80013da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001380:	2b80      	cmp	r3, #128	@ 0x80
 8001382:	d109      	bne.n	8001398 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001396:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	3304      	adds	r3, #4
 80013ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	78db      	ldrb	r3, [r3, #3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d108      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2200      	movs	r2, #0
 80013ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f005 fe8c 	bl	80070e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	015a      	lsls	r2, r3, #5
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013d4:	461a      	mov	r2, r3
 80013d6:	2302      	movs	r3, #2
 80013d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	015a      	lsls	r2, r3, #5
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013f0:	461a      	mov	r2, r3
 80013f2:	2320      	movs	r3, #32
 80013f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	015a      	lsls	r2, r3, #5
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800140c:	461a      	mov	r2, r3
 800140e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001412:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	3301      	adds	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800141a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f af62 	bne.w	80012ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fa0b 	bl	8004848 <USB_ReadInterrupts>
 8001432:	4603      	mov	r3, r0
 8001434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001438:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800143c:	f040 80db 	bne.w	80015f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fa2c 	bl	80048a2 <USB_ReadDevAllInEpInterrupt>
 800144a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001450:	e0cd      	b.n	80015ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80c2 	beq.w	80015e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fa52 	bl	8004912 <USB_ReadDevInEPInterrupt>
 800146e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d057      	beq.n	800152a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	2201      	movs	r2, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800148e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	69f9      	ldr	r1, [r7, #28]
 8001496:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800149a:	4013      	ands	r3, r2
 800149c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	015a      	lsls	r2, r3, #5
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014aa:	461a      	mov	r2, r3
 80014ac:	2301      	movs	r3, #1
 80014ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	799b      	ldrb	r3, [r3, #6]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d132      	bne.n	800151e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	3320      	adds	r3, #32
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4403      	add	r3, r0
 80014d8:	331c      	adds	r3, #28
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4419      	add	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4403      	add	r3, r0
 80014ec:	3320      	adds	r3, #32
 80014ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d113      	bne.n	800151e <HAL_PCD_IRQHandler+0x3a2>
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3324      	adds	r3, #36	@ 0x24
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001516:	461a      	mov	r2, r3
 8001518:	2101      	movs	r1, #1
 800151a:	f003 fa59 	bl	80049d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f005 fd60 	bl	8006fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001540:	461a      	mov	r2, r3
 8001542:	2308      	movs	r3, #8
 8001544:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	015a      	lsls	r2, r3, #5
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800155c:	461a      	mov	r2, r3
 800155e:	2310      	movs	r3, #16
 8001560:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001578:	461a      	mov	r2, r3
 800157a:	2340      	movs	r3, #64	@ 0x40
 800157c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d023      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001588:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800158a:	6a38      	ldr	r0, [r7, #32]
 800158c:	f002 fa40 	bl	8003a10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	3310      	adds	r3, #16
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	3304      	adds	r3, #4
 80015a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d108      	bne.n	80015be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f005 fda3 	bl	8007104 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ca:	461a      	mov	r2, r3
 80015cc:	2302      	movs	r3, #2
 80015ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fcbd 	bl	8001f5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f47f af2e 	bne.w	8001452 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f924 	bl	8004848 <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800160a:	d122      	bne.n	8001652 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001632:	2100      	movs	r1, #0
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fea3 	bl	8002380 <HAL_PCDEx_LPM_Callback>
 800163a:	e002      	b.n	8001642 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f005 fd41 	bl	80070c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f8f6 	bl	8004848 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001666:	d112      	bne.n	800168e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f005 fcfd 	bl	8007078 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800168c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 f8d8 	bl	8004848 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a2:	f040 80b7 	bne.w	8001814 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2110      	movs	r1, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 f9a5 	bl	8003a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ca:	e046      	b.n	800175a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016d8:	461a      	mov	r2, r3
 80016da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f0:	0151      	lsls	r1, r2, #5
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	440a      	add	r2, r1
 80016f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800170c:	461a      	mov	r2, r3
 800170e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001712:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001724:	0151      	lsls	r1, r2, #5
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	440a      	add	r2, r1
 800172a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800172e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001744:	0151      	lsls	r1, r2, #5
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	440a      	add	r2, r1
 800174a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800174e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001752:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001756:	3301      	adds	r3, #1
 8001758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	461a      	mov	r2, r3
 8001760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001762:	4293      	cmp	r3, r2
 8001764:	d3b2      	bcc.n	80016cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001774:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001778:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7bdb      	ldrb	r3, [r3, #15]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d016      	beq.n	80017b0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001792:	f043 030b 	orr.w	r3, r3, #11
 8001796:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017a8:	f043 030b 	orr.w	r3, r3, #11
 80017ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ae:	e015      	b.n	80017dc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017c2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80017c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017d6:	f043 030b 	orr.w	r3, r3, #11
 80017da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017fe:	461a      	mov	r2, r3
 8001800:	f003 f8e6 	bl	80049d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f815 	bl	8004848 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001828:	d123      	bne.n	8001872 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f8ab 	bl	800498a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 f962 	bl	8003b02 <USB_GetDevSpeed>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	f001 f9c9 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 800184e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001854:	461a      	mov	r2, r3
 8001856:	4620      	mov	r0, r4
 8001858:	f001 fe66 	bl	8003528 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f005 fbec 	bl	800703a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 ffe6 	bl	8004848 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d10a      	bne.n	800189c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f005 fbc9 	bl	800701e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f002 0208 	and.w	r2, r2, #8
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 ffd1 	bl	8004848 <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ac:	2b80      	cmp	r3, #128	@ 0x80
 80018ae:	d123      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018bc:	2301      	movs	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c0:	e014      	b.n	80018ec <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb0a 	bl	8001efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d3e4      	bcc.n	80018c2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 ffa3 	bl	8004848 <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800190c:	d13c      	bne.n	8001988 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
 8001912:	e02b      	b.n	800196c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4413      	add	r3, r2
 800191c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3318      	adds	r3, #24
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d115      	bne.n	8001966 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800193a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	da12      	bge.n	8001966 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3317      	adds	r3, #23
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 faca 	bl	8001efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	3301      	adds	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	791b      	ldrb	r3, [r3, #4]
 8001970:	461a      	mov	r2, r3
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	4293      	cmp	r3, r2
 8001976:	d3cd      	bcc.n	8001914 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 ff5b 	bl	8004848 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800199c:	d156      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199e:	2301      	movs	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a2:	e045      	b.n	8001a30 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d12e      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da2b      	bge.n	8001a2a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	0c1a      	lsrs	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019dc:	4053      	eors	r3, r2
 80019de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d121      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a26:	6053      	str	r3, [r2, #4]
            break;
 8001a28:	e008      	b.n	8001a3c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	461a      	mov	r2, r3
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d3b3      	bcc.n	80019a4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fef9 	bl	8004848 <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a60:	d10a      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f005 fb60 	bl	8007128 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fee3 	bl	8004848 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d115      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f005 fb50 	bl	8007144 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	e000      	b.n	8001ab8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ab6:	bf00      	nop
    }
  }
}
 8001ab8:	3734      	adds	r7, #52	@ 0x34
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}

08001abe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_SetAddress+0x1a>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e012      	b.n	8001afe <HAL_PCD_SetAddress+0x40>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fe42 	bl	8004778 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	4608      	mov	r0, r1
 8001b10:	4611      	mov	r1, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	4603      	mov	r3, r0
 8001b16:	70fb      	strb	r3, [r7, #3]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	803b      	strh	r3, [r7, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da0f      	bge.n	8001b4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 020f 	and.w	r2, r3, #15
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	705a      	strb	r2, [r3, #1]
 8001b4a:	e00f      	b.n	8001b6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 020f 	and.w	r2, r3, #15
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	3304      	adds	r3, #4
 8001b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b78:	883b      	ldrh	r3, [r7, #0]
 8001b7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	78ba      	ldrb	r2, [r7, #2]
 8001b86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b9a:	78bb      	ldrb	r3, [r7, #2]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_PCD_EP_Open+0xae>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e00e      	b.n	8001bd2 <HAL_PCD_EP_Open+0xcc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 ffc2 	bl	8003b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da0f      	bge.n	8001c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	705a      	strb	r2, [r3, #1]
 8001c0c:	e00f      	b.n	8001c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_PCD_EP_Close+0x6e>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e00e      	b.n	8001c66 <HAL_PCD_EP_Close+0x8c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f800 	bl	8003c5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	799b      	ldrb	r3, [r3, #6]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	799b      	ldrb	r3, [r3, #6]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	f002 f89d 	bl	8003e14 <USB_EPStartXfer>

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	460b      	mov	r3, r1
 8001d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	3310      	adds	r3, #16
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2201      	movs	r2, #1
 8001d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	799b      	ldrb	r3, [r3, #6]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	799b      	ldrb	r3, [r3, #6]
 8001d76:	461a      	mov	r2, r3
 8001d78:	6979      	ldr	r1, [r7, #20]
 8001d7a:	f002 f84b 	bl	8003e14 <USB_EPStartXfer>

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	7912      	ldrb	r2, [r2, #4]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e04f      	b.n	8001e46 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da0f      	bge.n	8001dce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00d      	b.n	8001dea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_EP_SetStall+0x82>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e01d      	b.n	8001e46 <HAL_PCD_EP_SetStall+0xbe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 fbd9 	bl	80045d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7999      	ldrb	r1, [r3, #6]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e36:	461a      	mov	r2, r3
 8001e38:	f002 fdca 	bl	80049d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	7912      	ldrb	r2, [r2, #4]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e042      	b.n	8001ef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da0f      	bge.n	8001e94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	3310      	adds	r3, #16
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	705a      	strb	r2, [r3, #1]
 8001e92:	e00f      	b.n	8001eb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 020f 	and.w	r2, r3, #15
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_PCD_EP_ClrStall+0x86>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e00e      	b.n	8001ef2 <HAL_PCD_EP_ClrStall+0xa4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68f9      	ldr	r1, [r7, #12]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fbe2 	bl	80046ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	da0c      	bge.n	8001f28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e00c      	b.n	8001f42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68f9      	ldr	r1, [r7, #12]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fa01 	bl	8004350 <USB_EPStopXfer>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d901      	bls.n	8001f94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e06b      	b.n	800206c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d902      	bls.n	8001fb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fb8:	e02a      	b.n	8002010 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d902      	bls.n	8001fd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f002 fa56 	bl	80044a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	441a      	add	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	441a      	add	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	429a      	cmp	r2, r3
 8002024:	d809      	bhi.n	800203a <PCD_WriteEmptyTxFifo+0xde>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800202e:	429a      	cmp	r2, r3
 8002030:	d203      	bcs.n	800203a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1bf      	bne.n	8001fba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	d811      	bhi.n	800206a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	2201      	movs	r2, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800205a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	43db      	mvns	r3, r3
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002066:	4013      	ands	r3, r2
 8002068:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	333c      	adds	r3, #60	@ 0x3c
 800208c:	3304      	adds	r3, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	799b      	ldrb	r3, [r3, #6]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d17b      	bne.n	80021a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4a61      	ldr	r2, [pc, #388]	@ (800223c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	f240 80b9 	bls.w	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80b3 	beq.w	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d6:	461a      	mov	r2, r3
 80020d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020dc:	6093      	str	r3, [r2, #8]
 80020de:	e0a7      	b.n	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f6:	461a      	mov	r2, r3
 80020f8:	2320      	movs	r3, #32
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	e098      	b.n	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 8093 	bne.w	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4a4b      	ldr	r2, [pc, #300]	@ (800223c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d90f      	bls.n	8002132 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002128:	461a      	mov	r2, r3
 800212a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800212e:	6093      	str	r3, [r2, #8]
 8002130:	e07e      	b.n	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	3304      	adds	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	0159      	lsls	r1, r3, #5
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	440b      	add	r3, r1
 8002154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d114      	bne.n	8002194 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800217c:	461a      	mov	r2, r3
 800217e:	2101      	movs	r1, #1
 8002180:	f002 fc26 	bl	80049d0 <USB_EP0_OutStart>
 8002184:	e006      	b.n	8002194 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	441a      	add	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f004 ff0a 	bl	8006fb4 <HAL_PCD_DataOutStageCallback>
 80021a0:	e046      	b.n	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d124      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	e032      	b.n	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e0:	461a      	mov	r2, r3
 80021e2:	2320      	movs	r3, #32
 80021e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f004 fee1 	bl	8006fb4 <HAL_PCD_DataOutStageCallback>
 80021f2:	e01d      	b.n	8002230 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d114      	bne.n	8002224 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800221c:	461a      	mov	r2, r3
 800221e:	2100      	movs	r1, #0
 8002220:	f002 fbd6 	bl	80049d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f004 fec2 	bl	8006fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	4f54300a 	.word	0x4f54300a
 8002240:	4f54310a 	.word	0x4f54310a

08002244 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	333c      	adds	r3, #60	@ 0x3c
 800225c:	3304      	adds	r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <PCD_EP_OutSetupPacket_int+0x88>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d90e      	bls.n	8002298 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002296:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f004 fe79 	bl	8006f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <PCD_EP_OutSetupPacket_int+0x88>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d90c      	bls.n	80022c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	799b      	ldrb	r3, [r3, #6]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022b8:	461a      	mov	r2, r3
 80022ba:	2101      	movs	r1, #1
 80022bc:	f002 fb88 	bl	80049d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	4f54300a 	.word	0x4f54300a

080022d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
 80022dc:	4613      	mov	r3, r2
 80022de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d107      	bne.n	80022fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ee:	883b      	ldrh	r3, [r7, #0]
 80022f0:	0419      	lsls	r1, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80022fc:	e028      	b.n	8002350 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4413      	add	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e00d      	b.n	800232e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3340      	adds	r3, #64	@ 0x40
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4413      	add	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	3301      	adds	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	3b01      	subs	r3, #1
 8002334:	429a      	cmp	r2, r3
 8002336:	d3ec      	bcc.n	8002312 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002338:	883b      	ldrh	r3, [r7, #0]
 800233a:	0418      	lsls	r0, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	3b01      	subs	r3, #1
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	4302      	orrs	r2, r0
 8002348:	3340      	adds	r3, #64	@ 0x40
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e267      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d075      	beq.n	80024a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023b6:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d00c      	beq.n	80023dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b85      	ldr	r3, [pc, #532]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d112      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b82      	ldr	r3, [pc, #520]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023da:	d10b      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	4b7e      	ldr	r3, [pc, #504]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d157      	bne.n	80024a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e242      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x74>
 80023fe:	4b76      	ldr	r3, [pc, #472]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a75      	ldr	r2, [pc, #468]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x98>
 8002416:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6f      	ldr	r2, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6c      	ldr	r2, [pc, #432]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 8002430:	4b69      	ldr	r3, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a68      	ldr	r2, [pc, #416]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a65      	ldr	r2, [pc, #404]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fa8a 	bl	8000968 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fa86 	bl	8000968 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e207      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xc0>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fa76 	bl	8000968 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fa72 	bl	8000968 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1f3      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0xe8>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024ae:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b44      	ldr	r3, [pc, #272]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b41      	ldr	r3, [pc, #260]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x152>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1c7      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4937      	ldr	r1, [pc, #220]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e03a      	b.n	8002576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_RCC_OscConfig+0x244>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fa2b 	bl	8000968 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7fe fa27 	bl	8000968 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1a8      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4925      	ldr	r1, [pc, #148]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e015      	b.n	8002576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <HAL_RCC_OscConfig+0x244>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fa0a 	bl	8000968 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7fe fa06 	bl	8000968 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e187      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d036      	beq.n	80025f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_RCC_OscConfig+0x248>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe f9ea 	bl	8000968 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe f9e6 	bl	8000968 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e167      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_RCC_OscConfig+0x240>)
 80025ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x200>
 80025b6:	e01b      	b.n	80025f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b8:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_OscConfig+0x248>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7fe f9d3 	bl	8000968 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	e00e      	b.n	80025e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7fe f9cf 	bl	8000968 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d907      	bls.n	80025e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e150      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	42470000 	.word	0x42470000
 80025e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ea      	bne.n	80025c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8097 	beq.w	800272c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b81      	ldr	r3, [pc, #516]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b7d      	ldr	r3, [pc, #500]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	4a7c      	ldr	r2, [pc, #496]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	@ 0x40
 800261e:	4b7a      	ldr	r3, [pc, #488]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b77      	ldr	r3, [pc, #476]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d118      	bne.n	800266c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b74      	ldr	r3, [pc, #464]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a73      	ldr	r2, [pc, #460]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7fe f98f 	bl	8000968 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe f98b 	bl	8000968 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e10c      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b6a      	ldr	r3, [pc, #424]	@ (800280c <HAL_RCC_OscConfig+0x474>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x2ea>
 8002674:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a63      	ldr	r2, [pc, #396]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002680:	e01c      	b.n	80026bc <HAL_RCC_OscConfig+0x324>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b05      	cmp	r3, #5
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x30c>
 800268a:	4b5f      	ldr	r3, [pc, #380]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	4a5e      	ldr	r2, [pc, #376]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6713      	str	r3, [r2, #112]	@ 0x70
 8002696:	4b5c      	ldr	r3, [pc, #368]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	4a5b      	ldr	r2, [pc, #364]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x324>
 80026a4:	4b58      	ldr	r3, [pc, #352]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a57      	ldr	r2, [pc, #348]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b0:	4b55      	ldr	r3, [pc, #340]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a54      	ldr	r2, [pc, #336]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 0304 	bic.w	r3, r3, #4
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d015      	beq.n	80026f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe f950 	bl	8000968 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe f94c 	bl	8000968 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0cb      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ee      	beq.n	80026cc <HAL_RCC_OscConfig+0x334>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7fe f93a 	bl	8000968 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7fe f936 	bl	8000968 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0b5      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ee      	bne.n	80026f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b39      	ldr	r3, [pc, #228]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	4a38      	ldr	r2, [pc, #224]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a1 	beq.w	8002878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002736:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b08      	cmp	r3, #8
 8002740:	d05c      	beq.n	80027fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d141      	bne.n	80027ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_OscConfig+0x478>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe f90a 	bl	8000968 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe f906 	bl	8000968 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e087      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	3b01      	subs	r3, #1
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	491b      	ldr	r1, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x478>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe f8df 	bl	8000968 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe f8db 	bl	8000968 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e05c      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x416>
 80027cc:	e054      	b.n	8002878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe f8c8 	bl	8000968 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe f8c4 	bl	8000968 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e045      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x444>
 80027fa:	e03d      	b.n	8002878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e038      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000
 8002810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4ec>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d028      	beq.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d121      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d11a      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800284c:	4293      	cmp	r3, r2
 800284e:	d111      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	3b01      	subs	r3, #1
 800285e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0cc      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b68      	ldr	r3, [pc, #416]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d90c      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b65      	ldr	r3, [pc, #404]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b63      	ldr	r3, [pc, #396]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b8      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028dc:	4b59      	ldr	r3, [pc, #356]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a58      	ldr	r2, [pc, #352]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f4:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a52      	ldr	r2, [pc, #328]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b50      	ldr	r3, [pc, #320]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	494d      	ldr	r1, [pc, #308]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d044      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d119      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d003      	beq.n	8002946 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	2b03      	cmp	r3, #3
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b3f      	ldr	r3, [pc, #252]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e067      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4b37      	ldr	r3, [pc, #220]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4934      	ldr	r1, [pc, #208]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002978:	f7fd fff6 	bl	8000968 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7fd fff2 	bl	8000968 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e04f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b2b      	ldr	r3, [pc, #172]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 020c 	and.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1eb      	bne.n	8002980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a8:	4b25      	ldr	r3, [pc, #148]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20c      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e032      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fa:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	490e      	ldr	r1, [pc, #56]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a0e:	f000 f821 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	490a      	ldr	r1, [pc, #40]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	5ccb      	ldrb	r3, [r1, r3]
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd ff56 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00
 8002a44:	40023800 	.word	0x40023800
 8002a48:	080075c4 	.word	0x080075c4
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000004 	.word	0x20000004

08002a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b090      	sub	sp, #64	@ 0x40
 8002a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d00d      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x40>
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	f200 80a1 	bhi.w	8002bc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x34>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a86:	e09b      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b53      	ldr	r3, [pc, #332]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a8c:	e09b      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8e:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002a90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a92:	e098      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a94:	4b4f      	ldr	r3, [pc, #316]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d028      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002abc:	2100      	movs	r1, #0
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac0:	fb03 f201 	mul.w	r2, r3, r1
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	4a43      	ldr	r2, [pc, #268]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ace:	fba0 1202 	umull	r1, r2, r0, r2
 8002ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ada:	4413      	add	r3, r2
 8002adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	61fa      	str	r2, [r7, #28]
 8002ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002aee:	f7fd fb79 	bl	80001e4 <__aeabi_uldivmod>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4613      	mov	r3, r2
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002afa:	e053      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afc:	4b35      	ldr	r3, [pc, #212]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	2200      	movs	r2, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	617a      	str	r2, [r7, #20]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b0e:	f04f 0b00 	mov.w	fp, #0
 8002b12:	4652      	mov	r2, sl
 8002b14:	465b      	mov	r3, fp
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b24:	0150      	lsls	r0, r2, #5
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b46:	ebb2 0408 	subs.w	r4, r2, r8
 8002b4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	00eb      	lsls	r3, r5, #3
 8002b58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5c:	00e2      	lsls	r2, r4, #3
 8002b5e:	4614      	mov	r4, r2
 8002b60:	461d      	mov	r5, r3
 8002b62:	eb14 030a 	adds.w	r3, r4, sl
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	eb45 030b 	adc.w	r3, r5, fp
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	028b      	lsls	r3, r1, #10
 8002b7e:	4621      	mov	r1, r4
 8002b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b84:	4621      	mov	r1, r4
 8002b86:	028a      	lsls	r2, r1, #10
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	60fa      	str	r2, [r7, #12]
 8002b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b98:	f7fd fb24 	bl	80001e4 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3740      	adds	r7, #64	@ 0x40
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	017d7840 	.word	0x017d7840

08002be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be4:	4b03      	ldr	r3, [pc, #12]	@ (8002bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bfc:	f7ff fff0 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	0a9b      	lsrs	r3, r3, #10
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	@ (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	080075d4 	.word	0x080075d4

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c24:	f7ff ffdc 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0b5b      	lsrs	r3, r3, #13
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	080075d4 	.word	0x080075d4

08002c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fd56 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	@ 0x24
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f973 	bl	8002f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d175      	bne.n	8002df4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Transmit+0x2c>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e06e      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2221      	movs	r2, #33	@ 0x21
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d26:	f7fd fe1f 	bl	8000968 <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d108      	bne.n	8002d54 <HAL_UART_Transmit+0x6c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e003      	b.n	8002d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d5c:	e02e      	b.n	8002dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f848 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e03a      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e007      	b.n	8002dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cb      	bne.n	8002d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2140      	movs	r1, #64	@ 0x40
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f814 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0e:	e03b      	b.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d037      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7fd fda6 	bl	8000968 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e03a      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d020      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d01d      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d116      	bne.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f81d 	bl	8002eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d0b4      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b095      	sub	sp, #84	@ 0x54
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ed8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3314      	adds	r3, #20
 8002f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d119      	bne.n	8002f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f48:	61ba      	str	r2, [r7, #24]
 8002f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	613b      	str	r3, [r7, #16]
   return(result);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f6a:	bf00      	nop
 8002f6c:	3754      	adds	r7, #84	@ 0x54
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0c0      	sub	sp, #256	@ 0x100
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	ea40 0301 	orr.w	r3, r0, r1
 8002fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fd0:	f021 010c 	bic.w	r1, r1, #12
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff2:	6999      	ldr	r1, [r3, #24]
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	ea40 0301 	orr.w	r3, r0, r1
 8002ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b8f      	ldr	r3, [pc, #572]	@ (8003244 <UART_SetConfig+0x2cc>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d005      	beq.n	8003018 <UART_SetConfig+0xa0>
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b8d      	ldr	r3, [pc, #564]	@ (8003248 <UART_SetConfig+0x2d0>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d104      	bne.n	8003022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7ff fe02 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 800301c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003020:	e003      	b.n	800302a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003022:	f7ff fde9 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8003026:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003034:	f040 810c 	bne.w	8003250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003042:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	1891      	adds	r1, r2, r2
 8003050:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003052:	415b      	adcs	r3, r3
 8003054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800305a:	4621      	mov	r1, r4
 800305c:	eb12 0801 	adds.w	r8, r2, r1
 8003060:	4629      	mov	r1, r5
 8003062:	eb43 0901 	adc.w	r9, r3, r1
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307a:	4690      	mov	r8, r2
 800307c:	4699      	mov	r9, r3
 800307e:	4623      	mov	r3, r4
 8003080:	eb18 0303 	adds.w	r3, r8, r3
 8003084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003088:	462b      	mov	r3, r5
 800308a:	eb49 0303 	adc.w	r3, r9, r3
 800308e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800309e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030a6:	460b      	mov	r3, r1
 80030a8:	18db      	adds	r3, r3, r3
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ac:	4613      	mov	r3, r2
 80030ae:	eb42 0303 	adc.w	r3, r2, r3
 80030b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80030b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030bc:	f7fd f892 	bl	80001e4 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <UART_SetConfig+0x2d4>)
 80030c6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	011c      	lsls	r4, r3, #4
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030e8:	415b      	adcs	r3, r3
 80030ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030f0:	4641      	mov	r1, r8
 80030f2:	eb12 0a01 	adds.w	sl, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0b01 	adc.w	fp, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800310c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003110:	4692      	mov	sl, r2
 8003112:	469b      	mov	fp, r3
 8003114:	4643      	mov	r3, r8
 8003116:	eb1a 0303 	adds.w	r3, sl, r3
 800311a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800311e:	464b      	mov	r3, r9
 8003120:	eb4b 0303 	adc.w	r3, fp, r3
 8003124:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003134:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800313c:	460b      	mov	r3, r1
 800313e:	18db      	adds	r3, r3, r3
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
 8003142:	4613      	mov	r3, r2
 8003144:	eb42 0303 	adc.w	r3, r2, r3
 8003148:	647b      	str	r3, [r7, #68]	@ 0x44
 800314a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800314e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003152:	f7fd f847 	bl	80001e4 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4611      	mov	r1, r2
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <UART_SetConfig+0x2d4>)
 800315e:	fba3 2301 	umull	r2, r3, r3, r1
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2264      	movs	r2, #100	@ 0x64
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	1acb      	subs	r3, r1, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003172:	4b36      	ldr	r3, [pc, #216]	@ (800324c <UART_SetConfig+0x2d4>)
 8003174:	fba3 2302 	umull	r2, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003180:	441c      	add	r4, r3
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800318c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	1891      	adds	r1, r2, r2
 800319a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800319c:	415b      	adcs	r3, r3
 800319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031a4:	4641      	mov	r1, r8
 80031a6:	1851      	adds	r1, r2, r1
 80031a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031aa:	4649      	mov	r1, r9
 80031ac:	414b      	adcs	r3, r1
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031bc:	4659      	mov	r1, fp
 80031be:	00cb      	lsls	r3, r1, #3
 80031c0:	4651      	mov	r1, sl
 80031c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c6:	4651      	mov	r1, sl
 80031c8:	00ca      	lsls	r2, r1, #3
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	4642      	mov	r2, r8
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031d8:	464b      	mov	r3, r9
 80031da:	460a      	mov	r2, r1
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031f8:	460b      	mov	r3, r1
 80031fa:	18db      	adds	r3, r3, r3
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	4613      	mov	r3, r2
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800320a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800320e:	f7fc ffe9 	bl	80001e4 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <UART_SetConfig+0x2d4>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	@ 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	@ 0x32
 800322a:	4a08      	ldr	r2, [pc, #32]	@ (800324c <UART_SetConfig+0x2d4>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4422      	add	r2, r4
 800323e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003240:	e106      	b.n	8003450 <UART_SetConfig+0x4d8>
 8003242:	bf00      	nop
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400
 800324c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800325a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800325e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003262:	4642      	mov	r2, r8
 8003264:	464b      	mov	r3, r9
 8003266:	1891      	adds	r1, r2, r2
 8003268:	6239      	str	r1, [r7, #32]
 800326a:	415b      	adcs	r3, r3
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
 800326e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003272:	4641      	mov	r1, r8
 8003274:	1854      	adds	r4, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb43 0501 	adc.w	r5, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	4643      	mov	r3, r8
 8003292:	18e3      	adds	r3, r4, r3
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003298:	464b      	mov	r3, r9
 800329a:	eb45 0303 	adc.w	r3, r5, r3
 800329e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032be:	4629      	mov	r1, r5
 80032c0:	008b      	lsls	r3, r1, #2
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c8:	4621      	mov	r1, r4
 80032ca:	008a      	lsls	r2, r1, #2
 80032cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032d0:	f7fc ff88 	bl	80001e4 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4b60      	ldr	r3, [pc, #384]	@ (800345c <UART_SetConfig+0x4e4>)
 80032da:	fba3 2302 	umull	r2, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	011c      	lsls	r4, r3, #4
 80032e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	61b9      	str	r1, [r7, #24]
 80032fc:	415b      	adcs	r3, r3
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003304:	4641      	mov	r1, r8
 8003306:	1851      	adds	r1, r2, r1
 8003308:	6139      	str	r1, [r7, #16]
 800330a:	4649      	mov	r1, r9
 800330c:	414b      	adcs	r3, r1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331c:	4659      	mov	r1, fp
 800331e:	00cb      	lsls	r3, r1, #3
 8003320:	4651      	mov	r1, sl
 8003322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003326:	4651      	mov	r1, sl
 8003328:	00ca      	lsls	r2, r1, #3
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	4603      	mov	r3, r0
 8003330:	4642      	mov	r2, r8
 8003332:	189b      	adds	r3, r3, r2
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003338:	464b      	mov	r3, r9
 800333a:	460a      	mov	r2, r1
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800334e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800335c:	4649      	mov	r1, r9
 800335e:	008b      	lsls	r3, r1, #2
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003366:	4641      	mov	r1, r8
 8003368:	008a      	lsls	r2, r1, #2
 800336a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800336e:	f7fc ff39 	bl	80001e4 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4611      	mov	r1, r2
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <UART_SetConfig+0x4e4>)
 800337a:	fba3 2301 	umull	r2, r3, r3, r1
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2264      	movs	r2, #100	@ 0x64
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	1acb      	subs	r3, r1, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	@ 0x32
 800338c:	4a33      	ldr	r2, [pc, #204]	@ (800345c <UART_SetConfig+0x4e4>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003398:	441c      	add	r4, r3
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80033a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	1891      	adds	r1, r2, r2
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	415b      	adcs	r3, r3
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b8:	4641      	mov	r1, r8
 80033ba:	1851      	adds	r1, r2, r1
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	4649      	mov	r1, r9
 80033c0:	414b      	adcs	r3, r1
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d0:	4659      	mov	r1, fp
 80033d2:	00cb      	lsls	r3, r1, #3
 80033d4:	4651      	mov	r1, sl
 80033d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033da:	4651      	mov	r1, sl
 80033dc:	00ca      	lsls	r2, r1, #3
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	4642      	mov	r2, r8
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033ea:	464b      	mov	r3, r9
 80033ec:	460a      	mov	r2, r1
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80033fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800340c:	4649      	mov	r1, r9
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4641      	mov	r1, r8
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4641      	mov	r1, r8
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800341e:	f7fc fee1 	bl	80001e4 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <UART_SetConfig+0x4e4>)
 8003428:	fba3 1302 	umull	r1, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	2164      	movs	r1, #100	@ 0x64
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	3332      	adds	r3, #50	@ 0x32
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <UART_SetConfig+0x4e4>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4422      	add	r2, r4
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003456:	46bd      	mov	sp, r7
 8003458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003460:	b084      	sub	sp, #16
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	f107 001c 	add.w	r0, r7, #28
 800346e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003472:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003476:	2b01      	cmp	r3, #1
 8003478:	d123      	bne.n	80034c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800348e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fae8 	bl	8004a8c <USB_CoreReset>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e01b      	b.n	80034fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fadc 	bl	8004a8c <USB_CoreReset>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80034ec:	e005      	b.n	80034fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034fa:	7fbb      	ldrb	r3, [r7, #30]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10b      	bne.n	8003518 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f043 0206 	orr.w	r2, r3, #6
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003524:	b004      	add	sp, #16
 8003526:	4770      	bx	lr

08003528 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d165      	bne.n	8003608 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4a41      	ldr	r2, [pc, #260]	@ (8003644 <USB_SetTurnaroundTime+0x11c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d906      	bls.n	8003552 <USB_SetTurnaroundTime+0x2a>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4a40      	ldr	r2, [pc, #256]	@ (8003648 <USB_SetTurnaroundTime+0x120>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d202      	bcs.n	8003552 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800354c:	230f      	movs	r3, #15
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e062      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4a3c      	ldr	r2, [pc, #240]	@ (8003648 <USB_SetTurnaroundTime+0x120>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d306      	bcc.n	8003568 <USB_SetTurnaroundTime+0x40>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4a3b      	ldr	r2, [pc, #236]	@ (800364c <USB_SetTurnaroundTime+0x124>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d202      	bcs.n	8003568 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003562:	230e      	movs	r3, #14
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e057      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4a38      	ldr	r2, [pc, #224]	@ (800364c <USB_SetTurnaroundTime+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d306      	bcc.n	800357e <USB_SetTurnaroundTime+0x56>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4a37      	ldr	r2, [pc, #220]	@ (8003650 <USB_SetTurnaroundTime+0x128>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d202      	bcs.n	800357e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003578:	230d      	movs	r3, #13
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e04c      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <USB_SetTurnaroundTime+0x128>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d306      	bcc.n	8003594 <USB_SetTurnaroundTime+0x6c>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4a32      	ldr	r2, [pc, #200]	@ (8003654 <USB_SetTurnaroundTime+0x12c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d802      	bhi.n	8003594 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800358e:	230c      	movs	r3, #12
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e041      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4a2f      	ldr	r2, [pc, #188]	@ (8003654 <USB_SetTurnaroundTime+0x12c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d906      	bls.n	80035aa <USB_SetTurnaroundTime+0x82>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <USB_SetTurnaroundTime+0x130>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d802      	bhi.n	80035aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035a4:	230b      	movs	r3, #11
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e036      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003658 <USB_SetTurnaroundTime+0x130>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d906      	bls.n	80035c0 <USB_SetTurnaroundTime+0x98>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4a29      	ldr	r2, [pc, #164]	@ (800365c <USB_SetTurnaroundTime+0x134>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d802      	bhi.n	80035c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035ba:	230a      	movs	r3, #10
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e02b      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a26      	ldr	r2, [pc, #152]	@ (800365c <USB_SetTurnaroundTime+0x134>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d906      	bls.n	80035d6 <USB_SetTurnaroundTime+0xae>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <USB_SetTurnaroundTime+0x138>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d202      	bcs.n	80035d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035d0:	2309      	movs	r3, #9
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e020      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a21      	ldr	r2, [pc, #132]	@ (8003660 <USB_SetTurnaroundTime+0x138>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d306      	bcc.n	80035ec <USB_SetTurnaroundTime+0xc4>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a20      	ldr	r2, [pc, #128]	@ (8003664 <USB_SetTurnaroundTime+0x13c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035e6:	2308      	movs	r3, #8
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e015      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <USB_SetTurnaroundTime+0x13c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d906      	bls.n	8003602 <USB_SetTurnaroundTime+0xda>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <USB_SetTurnaroundTime+0x140>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d202      	bcs.n	8003602 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035fc:	2307      	movs	r3, #7
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e00a      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003602:	2306      	movs	r3, #6
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e007      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800360e:	2309      	movs	r3, #9
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e001      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003614:	2309      	movs	r3, #9
 8003616:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	029b      	lsls	r3, r3, #10
 800362c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	00d8acbf 	.word	0x00d8acbf
 8003648:	00e4e1c0 	.word	0x00e4e1c0
 800364c:	00f42400 	.word	0x00f42400
 8003650:	01067380 	.word	0x01067380
 8003654:	011a499f 	.word	0x011a499f
 8003658:	01312cff 	.word	0x01312cff
 800365c:	014ca43f 	.word	0x014ca43f
 8003660:	016e3600 	.word	0x016e3600
 8003664:	01a6ab1f 	.word	0x01a6ab1f
 8003668:	01e84800 	.word	0x01e84800

0800366c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d115      	bne.n	80036fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036de:	200a      	movs	r0, #10
 80036e0:	f7fd f94e 	bl	8000980 <HAL_Delay>
      ms += 10U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	330a      	adds	r3, #10
 80036e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f001 f93f 	bl	800496e <USB_GetMode>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d01e      	beq.n	8003734 <USB_SetCurrentMode+0x84>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80036fa:	d9f0      	bls.n	80036de <USB_SetCurrentMode+0x2e>
 80036fc:	e01a      	b.n	8003734 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d115      	bne.n	8003730 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003710:	200a      	movs	r0, #10
 8003712:	f7fd f935 	bl	8000980 <HAL_Delay>
      ms += 10U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	330a      	adds	r3, #10
 800371a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 f926 	bl	800496e <USB_GetMode>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <USB_SetCurrentMode+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2bc7      	cmp	r3, #199	@ 0xc7
 800372c:	d9f0      	bls.n	8003710 <USB_SetCurrentMode+0x60>
 800372e:	e001      	b.n	8003734 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e005      	b.n	8003740 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2bc8      	cmp	r3, #200	@ 0xc8
 8003738:	d101      	bne.n	800373e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003748:	b084      	sub	sp, #16
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e009      	b.n	800377c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3340      	adds	r3, #64	@ 0x40
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3301      	adds	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0e      	cmp	r3, #14
 8003780:	d9f2      	bls.n	8003768 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11c      	bne.n	80037c4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80037c2:	e00b      	b.n	80037dc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80037e2:	461a      	mov	r2, r3
 80037e4:	2300      	movs	r3, #0
 80037e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10d      	bne.n	800380c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037f8:	2100      	movs	r1, #0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f968 	bl	8003ad0 <USB_SetDevSpeed>
 8003800:	e008      	b.n	8003814 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003802:	2101      	movs	r1, #1
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f963 	bl	8003ad0 <USB_SetDevSpeed>
 800380a:	e003      	b.n	8003814 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800380c:	2103      	movs	r1, #3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f95e 	bl	8003ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003814:	2110      	movs	r1, #16
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8fa 	bl	8003a10 <USB_FlushTxFifo>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f924 	bl	8003a74 <USB_FlushRxFifo>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383c:	461a      	mov	r2, r3
 800383e:	2300      	movs	r3, #0
 8003840:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003848:	461a      	mov	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e043      	b.n	80038e8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003876:	d118      	bne.n	80038aa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800388a:	461a      	mov	r2, r3
 800388c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e013      	b.n	80038bc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e008      	b.n	80038bc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b6:	461a      	mov	r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038da:	461a      	mov	r2, r3
 80038dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038ec:	461a      	mov	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d3b5      	bcc.n	8003860 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e043      	b.n	8003982 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800390c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003910:	d118      	bne.n	8003944 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e013      	b.n	8003956 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e008      	b.n	8003956 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	2300      	movs	r3, #0
 8003954:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003962:	461a      	mov	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800397a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3301      	adds	r3, #1
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003986:	461a      	mov	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4293      	cmp	r3, r2
 800398c:	d3b5      	bcc.n	80038fa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800399c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80039ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <USB_DevInit+0x2c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f043 0208 	orr.w	r2, r3, #8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr
 8003a0c:	803c3800 	.word	0x803c3800

08003a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a2a:	d901      	bls.n	8003a30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e01b      	b.n	8003a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	daf2      	bge.n	8003a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a54:	d901      	bls.n	8003a5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e006      	b.n	8003a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d0f0      	beq.n	8003a48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3301      	adds	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a8c:	d901      	bls.n	8003a92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e018      	b.n	8003ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	daf2      	bge.n	8003a80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ab0:	d901      	bls.n	8003ab6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e006      	b.n	8003ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d0f0      	beq.n	8003aa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0306 	and.w	r3, r3, #6
 8003b1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
 8003b26:	e00a      	b.n	8003b3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d002      	beq.n	8003b34 <USB_GetDevSpeed+0x32>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d102      	bne.n	8003b3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b34:	2302      	movs	r3, #2
 8003b36:	75fb      	strb	r3, [r7, #23]
 8003b38:	e001      	b.n	8003b3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b3a:	230f      	movs	r3, #15
 8003b3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d13a      	bne.n	8003bde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d155      	bne.n	8003c4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	791b      	ldrb	r3, [r3, #4]
 8003bba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	059b      	lsls	r3, r3, #22
 8003bc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e036      	b.n	8003c4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11a      	bne.n	8003c4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c32:	430b      	orrs	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d161      	bne.n	8003d3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c8e:	d11f      	bne.n	8003cd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003caa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d14:	4013      	ands	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	0159      	lsls	r1, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d32:	4619      	mov	r1, r3
 8003d34:	4b35      	ldr	r3, [pc, #212]	@ (8003e0c <USB_DeactivateEndpoint+0x1b0>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	e060      	b.n	8003dfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d52:	d11f      	bne.n	8003d94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	43db      	mvns	r3, r3
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003db4:	4013      	ands	r3, r2
 8003db6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0159      	lsls	r1, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df6:	4619      	mov	r1, r3
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <USB_DeactivateEndpoint+0x1b4>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	ec337800 	.word	0xec337800
 8003e10:	eff37800 	.word	0xeff37800

08003e14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	@ 0x28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 817f 	bne.w	8004134 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d132      	bne.n	8003ea4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e58:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e5c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e9c:	0cdb      	lsrs	r3, r3, #19
 8003e9e:	04db      	lsls	r3, r3, #19
 8003ea0:	6113      	str	r3, [r2, #16]
 8003ea2:	e097      	b.n	8003fd4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ebe:	0cdb      	lsrs	r3, r3, #19
 8003ec0:	04db      	lsls	r3, r3, #19
 8003ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ede:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ee2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ee6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11a      	bne.n	8003f24 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d903      	bls.n	8003f02 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f20:	6113      	str	r3, [r2, #16]
 8003f22:	e044      	b.n	8003fae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	8afb      	ldrh	r3, [r7, #22]
 8003f4a:	04d9      	lsls	r1, r3, #19
 8003f4c:	4ba4      	ldr	r3, [pc, #656]	@ (80041e0 <USB_EPStartXfer+0x3cc>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	0148      	lsls	r0, r1, #5
 8003f54:	69f9      	ldr	r1, [r7, #28]
 8003f56:	4401      	add	r1, r0
 8003f58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	791b      	ldrb	r3, [r3, #4]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d122      	bne.n	8003fae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f82:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003f86:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	075b      	lsls	r3, r3, #29
 8003f9a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	0148      	lsls	r0, r1, #5
 8003fa2:	69f9      	ldr	r1, [r7, #28]
 8003fa4:	4401      	add	r1, r0
 8003fa6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003faa:	4313      	orrs	r3, r2
 8003fac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	0148      	lsls	r0, r1, #5
 8003fc8:	69f9      	ldr	r1, [r7, #28]
 8003fca:	4401      	add	r1, r0
 8003fcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d14b      	bne.n	8004072 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	791b      	ldrb	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d128      	bne.n	8004050 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d110      	bne.n	8004030 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004028:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e00f      	b.n	8004050 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800406a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e166      	b.n	8004340 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800408c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004090:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	791b      	ldrb	r3, [r3, #4]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d015      	beq.n	80040c6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 814e 	beq.w	8004340 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	69f9      	ldr	r1, [r7, #28]
 80040bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c0:	4313      	orrs	r3, r2
 80040c2:	634b      	str	r3, [r1, #52]	@ 0x34
 80040c4:	e13c      	b.n	8004340 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d110      	bne.n	80040f8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00f      	b.n	8004118 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004116:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	b298      	uxth	r0, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4603      	mov	r3, r0
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f9b9 	bl	80044a4 <USB_WritePacket>
 8004132:	e105      	b.n	8004340 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800414e:	0cdb      	lsrs	r3, r3, #19
 8004150:	04db      	lsls	r3, r3, #19
 8004152:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800416e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004172:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004176:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d132      	bne.n	80041e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	0148      	lsls	r0, r1, #5
 80041b0:	69f9      	ldr	r1, [r7, #28]
 80041b2:	4401      	add	r1, r0
 80041b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80041b8:	4313      	orrs	r3, r2
 80041ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041da:	6113      	str	r3, [r2, #16]
 80041dc:	e062      	b.n	80042a4 <USB_EPStartXfer+0x490>
 80041de:	bf00      	nop
 80041e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d123      	bne.n	8004234 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004202:	69b9      	ldr	r1, [r7, #24]
 8004204:	0148      	lsls	r0, r1, #5
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	4401      	add	r1, r0
 800420a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800422c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004230:	6113      	str	r3, [r2, #16]
 8004232:	e037      	b.n	80042a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4413      	add	r3, r2
 800423e:	1e5a      	subs	r2, r3, #1
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	8afa      	ldrh	r2, [r7, #22]
 8004250:	fb03 f202 	mul.w	r2, r3, r2
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	04d9      	lsls	r1, r3, #19
 800426a:	4b38      	ldr	r3, [pc, #224]	@ (800434c <USB_EPStartXfer+0x538>)
 800426c:	400b      	ands	r3, r1
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	0148      	lsls	r0, r1, #5
 8004272:	69f9      	ldr	r1, [r7, #28]
 8004274:	4401      	add	r1, r0
 8004276:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	0148      	lsls	r0, r1, #5
 8004298:	69f9      	ldr	r1, [r7, #28]
 800429a:	4401      	add	r1, r0
 800429c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042a0:	4313      	orrs	r3, r2
 80042a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10d      	bne.n	80042c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c2:	460a      	mov	r2, r1
 80042c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	791b      	ldrb	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d128      	bne.n	8004320 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d110      	bne.n	8004300 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00f      	b.n	8004320 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800431e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800433a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800433e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	1ff80000 	.word	0x1ff80000

08004350 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d14a      	bne.n	8004404 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004386:	f040 8086 	bne.w	8004496 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043de:	4293      	cmp	r3, r2
 80043e0:	d902      	bls.n	80043e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
          break;
 80043e6:	e056      	b.n	8004496 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004400:	d0e7      	beq.n	80043d2 <USB_EPStopXfer+0x82>
 8004402:	e048      	b.n	8004496 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800441c:	d13b      	bne.n	8004496 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800443c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004440:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004464:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004472:	4293      	cmp	r3, r2
 8004474:	d902      	bls.n	800447c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
          break;
 800447a:	e00c      	b.n	8004496 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004494:	d0e7      	beq.n	8004466 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	@ 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	460b      	mov	r3, r1
 80044b4:	71fb      	strb	r3, [r7, #7]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d123      	bne.n	8004512 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044ca:	88bb      	ldrh	r3, [r7, #4]
 80044cc:	3303      	adds	r3, #3
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e018      	b.n	800450a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	031a      	lsls	r2, r3, #12
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e4:	461a      	mov	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3301      	adds	r3, #1
 8004502:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	3301      	adds	r3, #1
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3e2      	bcc.n	80044d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3724      	adds	r7, #36	@ 0x24
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004520:	b480      	push	{r7}
 8004522:	b08b      	sub	sp, #44	@ 0x2c
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	b29b      	uxth	r3, r3
 800453c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	e014      	b.n	8004576 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	601a      	str	r2, [r3, #0]
    pDest++;
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	3301      	adds	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	3301      	adds	r3, #1
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	3301      	adds	r3, #1
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	3301      	adds	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	3301      	adds	r3, #1
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	6a3a      	ldr	r2, [r7, #32]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	429a      	cmp	r2, r3
 800457c:	d3e6      	bcc.n	800454c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800457e:	8bfb      	ldrh	r3, [r7, #30]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01e      	beq.n	80045c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458e:	461a      	mov	r2, r3
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	701a      	strb	r2, [r3, #0]
      i++;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	3301      	adds	r3, #1
 80045ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	3301      	adds	r3, #1
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80045b6:	8bfb      	ldrh	r3, [r7, #30]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ea      	bne.n	8004598 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	372c      	adds	r7, #44	@ 0x2c
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d12c      	bne.n	8004646 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db12      	blt.n	8004624 <USB_EPSetStall+0x54>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00f      	beq.n	8004624 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004622:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e02b      	b.n	800469e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	db12      	blt.n	800467e <USB_EPSetStall+0xae>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00f      	beq.n	800467e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004678:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800467c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800469c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d128      	bne.n	800471a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	791b      	ldrb	r3, [r3, #4]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <USB_EPClearStall+0x4c>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d138      	bne.n	800476a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e027      	b.n	800476a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004734:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004738:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	791b      	ldrb	r3, [r3, #4]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d003      	beq.n	800474a <USB_EPClearStall+0x9e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	791b      	ldrb	r3, [r3, #4]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d10f      	bne.n	800476a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	440a      	add	r2, r1
 8004760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004768:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004796:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800479a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80047ac:	68f9      	ldr	r1, [r7, #12]
 80047ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f2:	f023 0302 	bic.w	r3, r3, #2
 80047f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004820:	f023 0303 	bic.w	r3, r3, #3
 8004824:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004834:	f043 0302 	orr.w	r3, r3, #2
 8004838:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	0c1b      	lsrs	r3, r3, #16
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	b29b      	uxth	r3, r3
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004904:	68bb      	ldr	r3, [r7, #8]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004934:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	b2db      	uxtb	r3, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4013      	ands	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004960:	68bb      	ldr	r3, [r7, #8]
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0301 	and.w	r3, r3, #1
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	460b      	mov	r3, r1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	333c      	adds	r3, #60	@ 0x3c
 80049e6:	3304      	adds	r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4a26      	ldr	r2, [pc, #152]	@ (8004a88 <USB_EP0_OutStart+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d90a      	bls.n	8004a0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a04:	d101      	bne.n	8004a0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e037      	b.n	8004a7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	2300      	movs	r3, #0
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a38:	f043 0318 	orr.w	r3, r3, #24
 8004a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004a50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10f      	bne.n	8004a78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004a76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	4f54300a 	.word	0x4f54300a

08004a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aa4:	d901      	bls.n	8004aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e022      	b.n	8004af0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	daf2      	bge.n	8004a98 <USB_CoreReset+0xc>

  count = 10U;
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004ab6:	e002      	b.n	8004abe <USB_CoreReset+0x32>
  {
    count--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f9      	bne.n	8004ab8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f043 0201 	orr.w	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004adc:	d901      	bls.n	8004ae2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e006      	b.n	8004af0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d0f0      	beq.n	8004ad0 <USB_CoreReset+0x44>

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b08:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004b0c:	f002 fcb2 	bl	8007474 <USBD_static_malloc>
 8004b10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	32b0      	adds	r2, #176	@ 0xb0
 8004b22:	2100      	movs	r1, #0
 8004b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0d4      	b.n	8004cd6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004b2c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004b30:	2100      	movs	r1, #0
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f002 fce2 	bl	80074fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	32b0      	adds	r2, #176	@ 0xb0
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	32b0      	adds	r2, #176	@ 0xb0
 8004b52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7c1b      	ldrb	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d138      	bne.n	8004bd6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b64:	4b5e      	ldr	r3, [pc, #376]	@ (8004ce0 <USBD_CDC_Init+0x1e4>)
 8004b66:	7819      	ldrb	r1, [r3, #0]
 8004b68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f002 fb5d 	bl	800722e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b74:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce0 <USBD_CDC_Init+0x1e4>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	3323      	adds	r3, #35	@ 0x23
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b8e:	4b55      	ldr	r3, [pc, #340]	@ (8004ce4 <USBD_CDC_Init+0x1e8>)
 8004b90:	7819      	ldrb	r1, [r3, #0]
 8004b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b96:	2202      	movs	r2, #2
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f002 fb48 	bl	800722e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b9e:	4b51      	ldr	r3, [pc, #324]	@ (8004ce4 <USBD_CDC_Init+0x1e8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004bba:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce8 <USBD_CDC_Init+0x1ec>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f003 020f 	and.w	r2, r3, #15
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	331c      	adds	r3, #28
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e035      	b.n	8004c42 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004bd6:	4b42      	ldr	r3, [pc, #264]	@ (8004ce0 <USBD_CDC_Init+0x1e4>)
 8004bd8:	7819      	ldrb	r1, [r3, #0]
 8004bda:	2340      	movs	r3, #64	@ 0x40
 8004bdc:	2202      	movs	r2, #2
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f002 fb25 	bl	800722e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004be4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce0 <USBD_CDC_Init+0x1e4>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3323      	adds	r3, #35	@ 0x23
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bfe:	4b39      	ldr	r3, [pc, #228]	@ (8004ce4 <USBD_CDC_Init+0x1e8>)
 8004c00:	7819      	ldrb	r1, [r3, #0]
 8004c02:	2340      	movs	r3, #64	@ 0x40
 8004c04:	2202      	movs	r2, #2
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f002 fb11 	bl	800722e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c0c:	4b35      	ldr	r3, [pc, #212]	@ (8004ce4 <USBD_CDC_Init+0x1e8>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c28:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce8 <USBD_CDC_Init+0x1ec>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 020f 	and.w	r2, r3, #15
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	331c      	adds	r3, #28
 8004c3e:	2210      	movs	r2, #16
 8004c40:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c42:	4b29      	ldr	r3, [pc, #164]	@ (8004ce8 <USBD_CDC_Init+0x1ec>)
 8004c44:	7819      	ldrb	r1, [r3, #0]
 8004c46:	2308      	movs	r3, #8
 8004c48:	2203      	movs	r2, #3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f002 faef 	bl	800722e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004c50:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <USBD_CDC_Init+0x1ec>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f003 020f 	and.w	r2, r3, #15
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3323      	adds	r3, #35	@ 0x23
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	33b0      	adds	r3, #176	@ 0xb0
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e018      	b.n	8004cd6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7c1b      	ldrb	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <USBD_CDC_Init+0x1e8>)
 8004cae:	7819      	ldrb	r1, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f002 fba6 	bl	800740c <USBD_LL_PrepareReceive>
 8004cc0:	e008      	b.n	8004cd4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <USBD_CDC_Init+0x1e8>)
 8004cc4:	7819      	ldrb	r1, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ccc:	2340      	movs	r3, #64	@ 0x40
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f002 fb9c 	bl	800740c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000093 	.word	0x20000093
 8004ce4:	20000094 	.word	0x20000094
 8004ce8:	20000095 	.word	0x20000095

08004cec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <USBD_CDC_DeInit+0xf8>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f002 fabb 	bl	800727a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004d04:	4b37      	ldr	r3, [pc, #220]	@ (8004de4 <USBD_CDC_DeInit+0xf8>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3323      	adds	r3, #35	@ 0x23
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004d1e:	4b32      	ldr	r3, [pc, #200]	@ (8004de8 <USBD_CDC_DeInit+0xfc>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f002 faa8 	bl	800727a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <USBD_CDC_DeInit+0xfc>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004d46:	4b29      	ldr	r3, [pc, #164]	@ (8004dec <USBD_CDC_DeInit+0x100>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f002 fa94 	bl	800727a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004d52:	4b26      	ldr	r3, [pc, #152]	@ (8004dec <USBD_CDC_DeInit+0x100>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3323      	adds	r3, #35	@ 0x23
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dec <USBD_CDC_DeInit+0x100>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	331c      	adds	r3, #28
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	32b0      	adds	r2, #176	@ 0xb0
 8004d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01f      	beq.n	8004dd8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	33b0      	adds	r3, #176	@ 0xb0
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	32b0      	adds	r2, #176	@ 0xb0
 8004db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f002 fb68 	bl	8007490 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	32b0      	adds	r2, #176	@ 0xb0
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000093 	.word	0x20000093
 8004de8:	20000094 	.word	0x20000094
 8004dec:	20000095 	.word	0x20000095

08004df0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	32b0      	adds	r2, #176	@ 0xb0
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0bf      	b.n	8004fa0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d050      	beq.n	8004ece <USBD_CDC_Setup+0xde>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	f040 80af 	bne.w	8004f90 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	88db      	ldrh	r3, [r3, #6]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03a      	beq.n	8004eb0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da1b      	bge.n	8004e7c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	33b0      	adds	r3, #176	@ 0xb0
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004e5a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	88d2      	ldrh	r2, [r2, #6]
 8004e60:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	88db      	ldrh	r3, [r3, #6]
 8004e66:	2b07      	cmp	r3, #7
 8004e68:	bf28      	it	cs
 8004e6a:	2307      	movcs	r3, #7
 8004e6c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	89fa      	ldrh	r2, [r7, #14]
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fda9 	bl	80069cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004e7a:	e090      	b.n	8004f9e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785a      	ldrb	r2, [r3, #1]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	88db      	ldrh	r3, [r3, #6]
 8004e8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e8c:	d803      	bhi.n	8004e96 <USBD_CDC_Setup+0xa6>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	88db      	ldrh	r3, [r3, #6]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	e000      	b.n	8004e98 <USBD_CDC_Setup+0xa8>
 8004e96:	2240      	movs	r2, #64	@ 0x40
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e9e:	6939      	ldr	r1, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fdbe 	bl	8006a2a <USBD_CtlPrepareRx>
      break;
 8004eae:	e076      	b.n	8004f9e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	33b0      	adds	r3, #176	@ 0xb0
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	7850      	ldrb	r0, [r2, #1]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	6839      	ldr	r1, [r7, #0]
 8004eca:	4798      	blx	r3
      break;
 8004ecc:	e067      	b.n	8004f9e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b0b      	cmp	r3, #11
 8004ed4:	d851      	bhi.n	8004f7a <USBD_CDC_Setup+0x18a>
 8004ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <USBD_CDC_Setup+0xec>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f89 	.word	0x08004f89
 8004ee4:	08004f7b 	.word	0x08004f7b
 8004ee8:	08004f7b 	.word	0x08004f7b
 8004eec:	08004f7b 	.word	0x08004f7b
 8004ef0:	08004f7b 	.word	0x08004f7b
 8004ef4:	08004f7b 	.word	0x08004f7b
 8004ef8:	08004f7b 	.word	0x08004f7b
 8004efc:	08004f7b 	.word	0x08004f7b
 8004f00:	08004f7b 	.word	0x08004f7b
 8004f04:	08004f37 	.word	0x08004f37
 8004f08:	08004f61 	.word	0x08004f61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d107      	bne.n	8004f28 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f18:	f107 030a 	add.w	r3, r7, #10
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 fd53 	bl	80069cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f26:	e032      	b.n	8004f8e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f001 fcd1 	bl	80068d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f30:	2303      	movs	r3, #3
 8004f32:	75fb      	strb	r3, [r7, #23]
          break;
 8004f34:	e02b      	b.n	8004f8e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d107      	bne.n	8004f52 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f42:	f107 030d 	add.w	r3, r7, #13
 8004f46:	2201      	movs	r2, #1
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 fd3e 	bl	80069cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f50:	e01d      	b.n	8004f8e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fcbc 	bl	80068d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f5e:	e016      	b.n	8004f8e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d00f      	beq.n	8004f8c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fcaf 	bl	80068d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f74:	2303      	movs	r3, #3
 8004f76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f78:	e008      	b.n	8004f8c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fca8 	bl	80068d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
          break;
 8004f86:	e002      	b.n	8004f8e <USBD_CDC_Setup+0x19e>
          break;
 8004f88:	bf00      	nop
 8004f8a:	e008      	b.n	8004f9e <USBD_CDC_Setup+0x1ae>
          break;
 8004f8c:	bf00      	nop
      }
      break;
 8004f8e:	e006      	b.n	8004f9e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fc9d 	bl	80068d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004fba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	32b0      	adds	r2, #176	@ 0xb0
 8004fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e065      	b.n	800509e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	32b0      	adds	r2, #176	@ 0xb0
 8004fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02f      	beq.n	800505c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	f003 020f 	and.w	r2, r3, #15
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3314      	adds	r3, #20
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	f003 010f 	and.w	r1, r3, #15
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	460b      	mov	r3, r1
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4403      	add	r3, r0
 8005024:	331c      	adds	r3, #28
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	fbb2 f1f3 	udiv	r1, r2, r3
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005032:	2b00      	cmp	r3, #0
 8005034:	d112      	bne.n	800505c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	3314      	adds	r3, #20
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800504e:	78f9      	ldrb	r1, [r7, #3]
 8005050:	2300      	movs	r3, #0
 8005052:	2200      	movs	r2, #0
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f002 f9b8 	bl	80073ca <USBD_LL_Transmit>
 800505a:	e01f      	b.n	800509c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	33b0      	adds	r3, #176	@ 0xb0
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	33b0      	adds	r3, #176	@ 0xb0
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	32b0      	adds	r2, #176	@ 0xb0
 80050bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	32b0      	adds	r2, #176	@ 0xb0
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e01a      	b.n	800510e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f002 f9b6 	bl	800744e <USBD_LL_GetRxDataSize>
 80050e2:	4602      	mov	r2, r0
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	33b0      	adds	r3, #176	@ 0xb0
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005108:	4611      	mov	r1, r2
 800510a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	32b0      	adds	r2, #176	@ 0xb0
 8005128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	e024      	b.n	8005182 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	33b0      	adds	r3, #176	@ 0xb0
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d019      	beq.n	8005180 <USBD_CDC_EP0_RxReady+0x6a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005152:	2bff      	cmp	r3, #255	@ 0xff
 8005154:	d014      	beq.n	8005180 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	33b0      	adds	r3, #176	@ 0xb0
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800516e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005176:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005194:	2182      	movs	r1, #130	@ 0x82
 8005196:	4818      	ldr	r0, [pc, #96]	@ (80051f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005198:	f000 fd62 	bl	8005c60 <USBD_GetEpDesc>
 800519c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800519e:	2101      	movs	r1, #1
 80051a0:	4815      	ldr	r0, [pc, #84]	@ (80051f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80051a2:	f000 fd5d 	bl	8005c60 <USBD_GetEpDesc>
 80051a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051a8:	2181      	movs	r1, #129	@ 0x81
 80051aa:	4813      	ldr	r0, [pc, #76]	@ (80051f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80051ac:	f000 fd58 	bl	8005c60 <USBD_GetEpDesc>
 80051b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2210      	movs	r2, #16
 80051bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d006      	beq.n	80051d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051cc:	711a      	strb	r2, [r3, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051e0:	711a      	strb	r2, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2243      	movs	r2, #67	@ 0x43
 80051ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051ec:	4b02      	ldr	r3, [pc, #8]	@ (80051f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000050 	.word	0x20000050

080051fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005204:	2182      	movs	r1, #130	@ 0x82
 8005206:	4818      	ldr	r0, [pc, #96]	@ (8005268 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005208:	f000 fd2a 	bl	8005c60 <USBD_GetEpDesc>
 800520c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800520e:	2101      	movs	r1, #1
 8005210:	4815      	ldr	r0, [pc, #84]	@ (8005268 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005212:	f000 fd25 	bl	8005c60 <USBD_GetEpDesc>
 8005216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005218:	2181      	movs	r1, #129	@ 0x81
 800521a:	4813      	ldr	r0, [pc, #76]	@ (8005268 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800521c:	f000 fd20 	bl	8005c60 <USBD_GetEpDesc>
 8005220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2210      	movs	r2, #16
 800522c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2200      	movs	r2, #0
 8005238:	711a      	strb	r2, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f042 0202 	orr.w	r2, r2, #2
 8005240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	711a      	strb	r2, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f042 0202 	orr.w	r2, r2, #2
 8005254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2243      	movs	r2, #67	@ 0x43
 800525a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800525c:	4b02      	ldr	r3, [pc, #8]	@ (8005268 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000050 	.word	0x20000050

0800526c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005274:	2182      	movs	r1, #130	@ 0x82
 8005276:	4818      	ldr	r0, [pc, #96]	@ (80052d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005278:	f000 fcf2 	bl	8005c60 <USBD_GetEpDesc>
 800527c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800527e:	2101      	movs	r1, #1
 8005280:	4815      	ldr	r0, [pc, #84]	@ (80052d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005282:	f000 fced 	bl	8005c60 <USBD_GetEpDesc>
 8005286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005288:	2181      	movs	r1, #129	@ 0x81
 800528a:	4813      	ldr	r0, [pc, #76]	@ (80052d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800528c:	f000 fce8 	bl	8005c60 <USBD_GetEpDesc>
 8005290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2210      	movs	r2, #16
 800529c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ac:	711a      	strb	r2, [r3, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052c0:	711a      	strb	r2, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2243      	movs	r2, #67	@ 0x43
 80052ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052cc:	4b02      	ldr	r3, [pc, #8]	@ (80052d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000050 	.word	0x20000050

080052dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	220a      	movs	r2, #10
 80052e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052ea:	4b03      	ldr	r3, [pc, #12]	@ (80052f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	2000000c 	.word	0x2000000c

080052fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800530c:	2303      	movs	r3, #3
 800530e:	e009      	b.n	8005324 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	33b0      	adds	r3, #176	@ 0xb0
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	32b0      	adds	r2, #176	@ 0xb0
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005352:	2303      	movs	r3, #3
 8005354:	e008      	b.n	8005368 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	32b0      	adds	r2, #176	@ 0xb0
 8005388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005394:	2303      	movs	r3, #3
 8005396:	e004      	b.n	80053a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	32b0      	adds	r2, #176	@ 0xb0
 80053c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e025      	b.n	8005422 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11f      	bne.n	8005420 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80053e8:	4b10      	ldr	r3, [pc, #64]	@ (800542c <USBD_CDC_TransmitPacket+0x7c>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4403      	add	r3, r0
 8005402:	3314      	adds	r3, #20
 8005404:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <USBD_CDC_TransmitPacket+0x7c>)
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 ffd7 	bl	80073ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000093 	.word	0x20000093

08005430 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	32b0      	adds	r2, #176	@ 0xb0
 8005442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005446:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	32b0      	adds	r2, #176	@ 0xb0
 8005452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800545a:	2303      	movs	r3, #3
 800545c:	e018      	b.n	8005490 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7c1b      	ldrb	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <USBD_CDC_ReceivePacket+0x68>)
 8005468:	7819      	ldrb	r1, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 ffc9 	bl	800740c <USBD_LL_PrepareReceive>
 800547a:	e008      	b.n	800548e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <USBD_CDC_ReceivePacket+0x68>)
 800547e:	7819      	ldrb	r1, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005486:	2340      	movs	r3, #64	@ 0x40
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 ffbf 	bl	800740c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000094 	.word	0x20000094

0800549c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e01f      	b.n	80054f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	79fa      	ldrb	r2, [r7, #7]
 80054e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f001 fe39 	bl	8007160 <USBD_LL_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005510:	2303      	movs	r3, #3
 8005512:	e025      	b.n	8005560 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	32ae      	adds	r2, #174	@ 0xae
 8005526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	32ae      	adds	r2, #174	@ 0xae
 800553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	f107 020e 	add.w	r2, r7, #14
 8005544:	4610      	mov	r0, r2
 8005546:	4798      	blx	r3
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 fe41 	bl	80071f8 <USBD_LL_Start>
 8005576:	4603      	mov	r3, r0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005588:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	4611      	mov	r1, r2
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
 80055c0:	4603      	mov	r3, r0
 80055c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	4611      	mov	r1, r2
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055f4:	2303      	movs	r3, #3
 80055f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f001 f922 	bl	800685e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2b02      	cmp	r3, #2
 800563c:	d01a      	beq.n	8005674 <USBD_LL_SetupStage+0x72>
 800563e:	2b02      	cmp	r3, #2
 8005640:	d822      	bhi.n	8005688 <USBD_LL_SetupStage+0x86>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <USBD_LL_SetupStage+0x4a>
 8005646:	2b01      	cmp	r3, #1
 8005648:	d00a      	beq.n	8005660 <USBD_LL_SetupStage+0x5e>
 800564a:	e01d      	b.n	8005688 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fb77 	bl	8005d48 <USBD_StdDevReq>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
      break;
 800565e:	e020      	b.n	80056a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fbdf 	bl	8005e2c <USBD_StdItfReq>
 800566e:	4603      	mov	r3, r0
 8005670:	73fb      	strb	r3, [r7, #15]
      break;
 8005672:	e016      	b.n	80056a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fc41 	bl	8005f04 <USBD_StdEPReq>
 8005682:	4603      	mov	r3, r0
 8005684:	73fb      	strb	r3, [r7, #15]
      break;
 8005686:	e00c      	b.n	80056a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800568e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005692:	b2db      	uxtb	r3, r3
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fe0e 	bl	80072b8 <USBD_LL_StallEP>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]
      break;
 80056a0:	bf00      	nop
  }

  return ret;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	460b      	mov	r3, r1
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d177      	bne.n	80057b4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80056ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	f040 80a1 	bne.w	800581a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	8992      	ldrh	r2, [r2, #12]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d91c      	bls.n	800571e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	8992      	ldrh	r2, [r2, #12]
 80056ec:	1a9a      	subs	r2, r3, r2
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	8992      	ldrh	r2, [r2, #12]
 80056fa:	441a      	add	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6919      	ldr	r1, [r3, #16]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	899b      	ldrh	r3, [r3, #12]
 8005708:	461a      	mov	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4293      	cmp	r3, r2
 8005710:	bf38      	it	cc
 8005712:	4613      	movcc	r3, r2
 8005714:	461a      	mov	r2, r3
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f001 f9a8 	bl	8006a6c <USBD_CtlContinueRx>
 800571c:	e07d      	b.n	800581a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2b02      	cmp	r3, #2
 800572a:	d014      	beq.n	8005756 <USBD_LL_DataOutStage+0xaa>
 800572c:	2b02      	cmp	r3, #2
 800572e:	d81d      	bhi.n	800576c <USBD_LL_DataOutStage+0xc0>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <USBD_LL_DataOutStage+0x8e>
 8005734:	2b01      	cmp	r3, #1
 8005736:	d003      	beq.n	8005740 <USBD_LL_DataOutStage+0x94>
 8005738:	e018      	b.n	800576c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	75bb      	strb	r3, [r7, #22]
            break;
 800573e:	e018      	b.n	8005772 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005746:	b2db      	uxtb	r3, r3
 8005748:	4619      	mov	r1, r3
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fa6e 	bl	8005c2c <USBD_CoreFindIF>
 8005750:	4603      	mov	r3, r0
 8005752:	75bb      	strb	r3, [r7, #22]
            break;
 8005754:	e00d      	b.n	8005772 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800575c:	b2db      	uxtb	r3, r3
 800575e:	4619      	mov	r1, r3
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fa70 	bl	8005c46 <USBD_CoreFindEP>
 8005766:	4603      	mov	r3, r0
 8005768:	75bb      	strb	r3, [r7, #22]
            break;
 800576a:	e002      	b.n	8005772 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	75bb      	strb	r3, [r7, #22]
            break;
 8005770:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005772:	7dbb      	ldrb	r3, [r7, #22]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d119      	bne.n	80057ac <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d113      	bne.n	80057ac <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005784:	7dba      	ldrb	r2, [r7, #22]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	32ae      	adds	r2, #174	@ 0xae
 800578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005794:	7dba      	ldrb	r2, [r7, #22]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800579c:	7dba      	ldrb	r2, [r7, #22]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	32ae      	adds	r2, #174	@ 0xae
 80057a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 f96e 	bl	8006a8e <USBD_CtlSendStatus>
 80057b2:	e032      	b.n	800581a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80057b4:	7afb      	ldrb	r3, [r7, #11]
 80057b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	4619      	mov	r1, r3
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa41 	bl	8005c46 <USBD_CoreFindEP>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057c8:	7dbb      	ldrb	r3, [r7, #22]
 80057ca:	2bff      	cmp	r3, #255	@ 0xff
 80057cc:	d025      	beq.n	800581a <USBD_LL_DataOutStage+0x16e>
 80057ce:	7dbb      	ldrb	r3, [r7, #22]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d122      	bne.n	800581a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d117      	bne.n	8005810 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057e0:	7dba      	ldrb	r2, [r7, #22]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	32ae      	adds	r2, #174	@ 0xae
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00f      	beq.n	8005810 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80057f0:	7dba      	ldrb	r2, [r7, #22]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057f8:	7dba      	ldrb	r2, [r7, #22]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	32ae      	adds	r2, #174	@ 0xae
 80057fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	7afa      	ldrb	r2, [r7, #11]
 8005806:	4611      	mov	r1, r2
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	4798      	blx	r3
 800580c:	4603      	mov	r3, r0
 800580e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	e000      	b.n	800581c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	460b      	mov	r3, r1
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d178      	bne.n	800592a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3314      	adds	r3, #20
 800583c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005844:	2b02      	cmp	r3, #2
 8005846:	d163      	bne.n	8005910 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	8992      	ldrh	r2, [r2, #12]
 8005850:	4293      	cmp	r3, r2
 8005852:	d91c      	bls.n	800588e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	8992      	ldrh	r2, [r2, #12]
 800585c:	1a9a      	subs	r2, r3, r2
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	8992      	ldrh	r2, [r2, #12]
 800586a:	441a      	add	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6919      	ldr	r1, [r3, #16]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	461a      	mov	r2, r3
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f001 f8c4 	bl	8006a08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005880:	2300      	movs	r3, #0
 8005882:	2200      	movs	r2, #0
 8005884:	2100      	movs	r1, #0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f001 fdc0 	bl	800740c <USBD_LL_PrepareReceive>
 800588c:	e040      	b.n	8005910 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	899b      	ldrh	r3, [r3, #12]
 8005892:	461a      	mov	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d11c      	bne.n	80058d6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d316      	bcc.n	80058d6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d20f      	bcs.n	80058d6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058b6:	2200      	movs	r2, #0
 80058b8:	2100      	movs	r1, #0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f001 f8a4 	bl	8006a08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058c8:	2300      	movs	r3, #0
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 fd9c 	bl	800740c <USBD_LL_PrepareReceive>
 80058d4:	e01c      	b.n	8005910 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d10f      	bne.n	8005902 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005902:	2180      	movs	r1, #128	@ 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f001 fcd7 	bl	80072b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f001 f8d2 	bl	8006ab4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d03a      	beq.n	8005990 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff fe30 	bl	8005580 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005928:	e032      	b.n	8005990 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005930:	b2db      	uxtb	r3, r3
 8005932:	4619      	mov	r1, r3
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f986 	bl	8005c46 <USBD_CoreFindEP>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2bff      	cmp	r3, #255	@ 0xff
 8005942:	d025      	beq.n	8005990 <USBD_LL_DataInStage+0x16c>
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d122      	bne.n	8005990 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b03      	cmp	r3, #3
 8005954:	d11c      	bne.n	8005990 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005956:	7dfa      	ldrb	r2, [r7, #23]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	32ae      	adds	r2, #174	@ 0xae
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005966:	7dfa      	ldrb	r2, [r7, #23]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800596e:	7dfa      	ldrb	r2, [r7, #23]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	32ae      	adds	r2, #174	@ 0xae
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	7afa      	ldrb	r2, [r7, #11]
 800597c:	4611      	mov	r1, r2
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	4798      	blx	r3
 8005982:	4603      	mov	r3, r0
 8005984:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005986:	7dbb      	ldrb	r3, [r7, #22]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800598c:	7dbb      	ldrb	r3, [r7, #22]
 800598e:	e000      	b.n	8005992 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d014      	beq.n	8005a00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6852      	ldr	r2, [r2, #4]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	4611      	mov	r1, r2
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80059fc:	2303      	movs	r3, #3
 80059fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a00:	2340      	movs	r3, #64	@ 0x40
 8005a02:	2200      	movs	r2, #0
 8005a04:	2100      	movs	r1, #0
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fc11 	bl	800722e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2240      	movs	r2, #64	@ 0x40
 8005a18:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a1c:	2340      	movs	r3, #64	@ 0x40
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2180      	movs	r1, #128	@ 0x80
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 fc03 	bl	800722e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2240      	movs	r2, #64	@ 0x40
 8005a34:	841a      	strh	r2, [r3, #32]

  return ret;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d006      	beq.n	8005a82 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2204      	movs	r2, #4
 8005a86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d106      	bne.n	8005aba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d110      	bne.n	8005afe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	32ae      	adds	r2, #174	@ 0xae
 8005b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e01c      	b.n	8005b64 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d115      	bne.n	8005b62 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	32ae      	adds	r2, #174	@ 0xae
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32ae      	adds	r2, #174	@ 0xae
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32ae      	adds	r2, #174	@ 0xae
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e01c      	b.n	8005bc8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d115      	bne.n	8005bc6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	32ae      	adds	r2, #174	@ 0xae
 8005ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	32ae      	adds	r2, #174	@ 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00e      	beq.n	8005c22 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6852      	ldr	r2, [r2, #4]
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	4611      	mov	r1, r2
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	885b      	ldrh	r3, [r3, #2]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d91f      	bls.n	8005cc6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c8c:	e013      	b.n	8005cb6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c8e:	f107 030a 	add.w	r3, r7, #10
 8005c92:	4619      	mov	r1, r3
 8005c94:	6978      	ldr	r0, [r7, #20]
 8005c96:	f000 f81b 	bl	8005cd0 <USBD_GetNextDesc>
 8005c9a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	2b05      	cmp	r3, #5
 8005ca2:	d108      	bne.n	8005cb6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	789b      	ldrb	r3, [r3, #2]
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d008      	beq.n	8005cc4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	885b      	ldrh	r3, [r3, #2]
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	897b      	ldrh	r3, [r7, #10]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d8e5      	bhi.n	8005c8e <USBD_GetEpDesc+0x2e>
 8005cc2:	e000      	b.n	8005cc6 <USBD_GetEpDesc+0x66>
          break;
 8005cc4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005cc6:	693b      	ldr	r3, [r7, #16]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d26:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	b21a      	sxth	r2, r3
 8005d2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	b21b      	sxth	r3, r3
 8005d36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d38:	89fb      	ldrh	r3, [r7, #14]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d5e:	2b40      	cmp	r3, #64	@ 0x40
 8005d60:	d005      	beq.n	8005d6e <USBD_StdDevReq+0x26>
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d857      	bhi.n	8005e16 <USBD_StdDevReq+0xce>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00f      	beq.n	8005d8a <USBD_StdDevReq+0x42>
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d153      	bne.n	8005e16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	32ae      	adds	r2, #174	@ 0xae
 8005d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e04a      	b.n	8005e20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d83b      	bhi.n	8005e0a <USBD_StdDevReq+0xc2>
 8005d92:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <USBD_StdDevReq+0x50>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005e01 	.word	0x08005e01
 8005da0:	08005e0b 	.word	0x08005e0b
 8005da4:	08005df7 	.word	0x08005df7
 8005da8:	08005e0b 	.word	0x08005e0b
 8005dac:	08005dcb 	.word	0x08005dcb
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005e0b 	.word	0x08005e0b
 8005db8:	08005de3 	.word	0x08005de3
 8005dbc:	08005dd5 	.word	0x08005dd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa3e 	bl	8006244 <USBD_GetDescriptor>
          break;
 8005dc8:	e024      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fba3 	bl	8006518 <USBD_SetAddress>
          break;
 8005dd2:	e01f      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fbe2 	bl	80065a0 <USBD_SetConfig>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
          break;
 8005de0:	e018      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fc85 	bl	80066f4 <USBD_GetConfig>
          break;
 8005dea:	e013      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fcb6 	bl	8006760 <USBD_GetStatus>
          break;
 8005df4:	e00e      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fce5 	bl	80067c8 <USBD_SetFeature>
          break;
 8005dfe:	e009      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fd09 	bl	800681a <USBD_ClrFeature>
          break;
 8005e08:	e004      	b.n	8005e14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fd60 	bl	80068d2 <USBD_CtlError>
          break;
 8005e12:	bf00      	nop
      }
      break;
 8005e14:	e004      	b.n	8005e20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd5a 	bl	80068d2 <USBD_CtlError>
      break;
 8005e1e:	bf00      	nop
  }

  return ret;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop

08005e2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e42:	2b40      	cmp	r3, #64	@ 0x40
 8005e44:	d005      	beq.n	8005e52 <USBD_StdItfReq+0x26>
 8005e46:	2b40      	cmp	r3, #64	@ 0x40
 8005e48:	d852      	bhi.n	8005ef0 <USBD_StdItfReq+0xc4>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <USBD_StdItfReq+0x26>
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d14e      	bne.n	8005ef0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d840      	bhi.n	8005ee2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	889b      	ldrh	r3, [r3, #4]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d836      	bhi.n	8005ed8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	889b      	ldrh	r3, [r3, #4]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff feda 	bl	8005c2c <USBD_CoreFindIF>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2bff      	cmp	r3, #255	@ 0xff
 8005e80:	d01d      	beq.n	8005ebe <USBD_StdItfReq+0x92>
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11a      	bne.n	8005ebe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e88:	7bba      	ldrb	r2, [r7, #14]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32ae      	adds	r2, #174	@ 0xae
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00f      	beq.n	8005eb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e98:	7bba      	ldrb	r2, [r7, #14]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ea0:	7bba      	ldrb	r2, [r7, #14]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32ae      	adds	r2, #174	@ 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005eb6:	e004      	b.n	8005ec2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ebc:	e001      	b.n	8005ec2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	88db      	ldrh	r3, [r3, #6]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d110      	bne.n	8005eec <USBD_StdItfReq+0xc0>
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10d      	bne.n	8005eec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fddc 	bl	8006a8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ed6:	e009      	b.n	8005eec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fcf9 	bl	80068d2 <USBD_CtlError>
          break;
 8005ee0:	e004      	b.n	8005eec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fcf4 	bl	80068d2 <USBD_CtlError>
          break;
 8005eea:	e000      	b.n	8005eee <USBD_StdItfReq+0xc2>
          break;
 8005eec:	bf00      	nop
      }
      break;
 8005eee:	e004      	b.n	8005efa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fced 	bl	80068d2 <USBD_CtlError>
      break;
 8005ef8:	bf00      	nop
  }

  return ret;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f20:	2b40      	cmp	r3, #64	@ 0x40
 8005f22:	d007      	beq.n	8005f34 <USBD_StdEPReq+0x30>
 8005f24:	2b40      	cmp	r3, #64	@ 0x40
 8005f26:	f200 8181 	bhi.w	800622c <USBD_StdEPReq+0x328>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d02a      	beq.n	8005f84 <USBD_StdEPReq+0x80>
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	f040 817c 	bne.w	800622c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fe84 	bl	8005c46 <USBD_CoreFindEP>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f42:	7b7b      	ldrb	r3, [r7, #13]
 8005f44:	2bff      	cmp	r3, #255	@ 0xff
 8005f46:	f000 8176 	beq.w	8006236 <USBD_StdEPReq+0x332>
 8005f4a:	7b7b      	ldrb	r3, [r7, #13]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 8172 	bne.w	8006236 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005f52:	7b7a      	ldrb	r2, [r7, #13]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f5a:	7b7a      	ldrb	r2, [r7, #13]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32ae      	adds	r2, #174	@ 0xae
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8165 	beq.w	8006236 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f6c:	7b7a      	ldrb	r2, [r7, #13]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32ae      	adds	r2, #174	@ 0xae
 8005f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f82:	e158      	b.n	8006236 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d008      	beq.n	8005f9e <USBD_StdEPReq+0x9a>
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	f300 8147 	bgt.w	8006220 <USBD_StdEPReq+0x31c>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 809b 	beq.w	80060ce <USBD_StdEPReq+0x1ca>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d03c      	beq.n	8006016 <USBD_StdEPReq+0x112>
 8005f9c:	e140      	b.n	8006220 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d002      	beq.n	8005fb0 <USBD_StdEPReq+0xac>
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d016      	beq.n	8005fdc <USBD_StdEPReq+0xd8>
 8005fae:	e02c      	b.n	800600a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <USBD_StdEPReq+0xce>
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	2b80      	cmp	r3, #128	@ 0x80
 8005fba:	d00a      	beq.n	8005fd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f979 	bl	80072b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fc6:	2180      	movs	r1, #128	@ 0x80
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f975 	bl	80072b8 <USBD_LL_StallEP>
 8005fce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd0:	e020      	b.n	8006014 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fc7c 	bl	80068d2 <USBD_CtlError>
              break;
 8005fda:	e01b      	b.n	8006014 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10e      	bne.n	8006002 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <USBD_StdEPReq+0xfe>
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b80      	cmp	r3, #128	@ 0x80
 8005fee:	d008      	beq.n	8006002 <USBD_StdEPReq+0xfe>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	88db      	ldrh	r3, [r3, #6]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 f95b 	bl	80072b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fd43 	bl	8006a8e <USBD_CtlSendStatus>

              break;
 8006008:	e004      	b.n	8006014 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fc60 	bl	80068d2 <USBD_CtlError>
              break;
 8006012:	bf00      	nop
          }
          break;
 8006014:	e109      	b.n	800622a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d002      	beq.n	8006028 <USBD_StdEPReq+0x124>
 8006022:	2b03      	cmp	r3, #3
 8006024:	d016      	beq.n	8006054 <USBD_StdEPReq+0x150>
 8006026:	e04b      	b.n	80060c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00d      	beq.n	800604a <USBD_StdEPReq+0x146>
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	2b80      	cmp	r3, #128	@ 0x80
 8006032:	d00a      	beq.n	800604a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 f93d 	bl	80072b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800603e:	2180      	movs	r1, #128	@ 0x80
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f939 	bl	80072b8 <USBD_LL_StallEP>
 8006046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006048:	e040      	b.n	80060cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fc40 	bl	80068d2 <USBD_CtlError>
              break;
 8006052:	e03b      	b.n	80060cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	885b      	ldrh	r3, [r3, #2]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d136      	bne.n	80060ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800605c:	7bbb      	ldrb	r3, [r7, #14]
 800605e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 f943 	bl	80072f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fd0c 	bl	8006a8e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff fde3 	bl	8005c46 <USBD_CoreFindEP>
 8006080:	4603      	mov	r3, r0
 8006082:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006084:	7b7b      	ldrb	r3, [r7, #13]
 8006086:	2bff      	cmp	r3, #255	@ 0xff
 8006088:	d01f      	beq.n	80060ca <USBD_StdEPReq+0x1c6>
 800608a:	7b7b      	ldrb	r3, [r7, #13]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11c      	bne.n	80060ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006090:	7b7a      	ldrb	r2, [r7, #13]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006098:	7b7a      	ldrb	r2, [r7, #13]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	32ae      	adds	r2, #174	@ 0xae
 800609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d010      	beq.n	80060ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060a8:	7b7a      	ldrb	r2, [r7, #13]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	32ae      	adds	r2, #174	@ 0xae
 80060ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80060be:	e004      	b.n	80060ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fc05 	bl	80068d2 <USBD_CtlError>
              break;
 80060c8:	e000      	b.n	80060cc <USBD_StdEPReq+0x1c8>
              break;
 80060ca:	bf00      	nop
          }
          break;
 80060cc:	e0ad      	b.n	800622a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d002      	beq.n	80060e0 <USBD_StdEPReq+0x1dc>
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d033      	beq.n	8006146 <USBD_StdEPReq+0x242>
 80060de:	e099      	b.n	8006214 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <USBD_StdEPReq+0x1f2>
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	2b80      	cmp	r3, #128	@ 0x80
 80060ea:	d004      	beq.n	80060f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fbef 	bl	80068d2 <USBD_CtlError>
                break;
 80060f4:	e093      	b.n	800621e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da0b      	bge.n	8006116 <USBD_StdEPReq+0x212>
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	3310      	adds	r3, #16
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	3304      	adds	r3, #4
 8006114:	e00b      	b.n	800612e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	3304      	adds	r3, #4
 800612e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	330e      	adds	r3, #14
 800613a:	2202      	movs	r2, #2
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fc44 	bl	80069cc <USBD_CtlSendData>
              break;
 8006144:	e06b      	b.n	800621e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da11      	bge.n	8006172 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3323      	adds	r3, #35	@ 0x23
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d117      	bne.n	8006198 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fbb1 	bl	80068d2 <USBD_CtlError>
                  break;
 8006170:	e055      	b.n	800621e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fb9e 	bl	80068d2 <USBD_CtlError>
                  break;
 8006196:	e042      	b.n	800621e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da0b      	bge.n	80061b8 <USBD_StdEPReq+0x2b4>
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	3310      	adds	r3, #16
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	e00b      	b.n	80061d0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	4413      	add	r3, r2
 80061ce:	3304      	adds	r3, #4
 80061d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <USBD_StdEPReq+0x2da>
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2b80      	cmp	r3, #128	@ 0x80
 80061dc:	d103      	bne.n	80061e6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	739a      	strb	r2, [r3, #14]
 80061e4:	e00e      	b.n	8006204 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 f8a2 	bl	8007334 <USBD_LL_IsStallEP>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2201      	movs	r2, #1
 80061fa:	739a      	strb	r2, [r3, #14]
 80061fc:	e002      	b.n	8006204 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	330e      	adds	r3, #14
 8006208:	2202      	movs	r2, #2
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fbdd 	bl	80069cc <USBD_CtlSendData>
              break;
 8006212:	e004      	b.n	800621e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb5b 	bl	80068d2 <USBD_CtlError>
              break;
 800621c:	bf00      	nop
          }
          break;
 800621e:	e004      	b.n	800622a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fb55 	bl	80068d2 <USBD_CtlError>
          break;
 8006228:	bf00      	nop
      }
      break;
 800622a:	e005      	b.n	8006238 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fb4f 	bl	80068d2 <USBD_CtlError>
      break;
 8006234:	e000      	b.n	8006238 <USBD_StdEPReq+0x334>
      break;
 8006236:	bf00      	nop
  }

  return ret;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	885b      	ldrh	r3, [r3, #2]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	2b06      	cmp	r3, #6
 8006266:	f200 8128 	bhi.w	80064ba <USBD_GetDescriptor+0x276>
 800626a:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <USBD_GetDescriptor+0x2c>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	0800628d 	.word	0x0800628d
 8006274:	080062a5 	.word	0x080062a5
 8006278:	080062e5 	.word	0x080062e5
 800627c:	080064bb 	.word	0x080064bb
 8006280:	080064bb 	.word	0x080064bb
 8006284:	0800645b 	.word	0x0800645b
 8006288:	08006487 	.word	0x08006487
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	7c12      	ldrb	r2, [r2, #16]
 8006298:	f107 0108 	add.w	r1, r7, #8
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
 80062a0:	60f8      	str	r0, [r7, #12]
      break;
 80062a2:	e112      	b.n	80064ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7c1b      	ldrb	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b4:	f107 0208 	add.w	r2, r7, #8
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
 80062bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3301      	adds	r3, #1
 80062c2:	2202      	movs	r2, #2
 80062c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062c6:	e100      	b.n	80064ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	f107 0208 	add.w	r2, r7, #8
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	2202      	movs	r2, #2
 80062e0:	701a      	strb	r2, [r3, #0]
      break;
 80062e2:	e0f2      	b.n	80064ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	885b      	ldrh	r3, [r3, #2]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	f200 80ac 	bhi.w	8006448 <USBD_GetDescriptor+0x204>
 80062f0:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <USBD_GetDescriptor+0xb4>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	08006311 	.word	0x08006311
 80062fc:	08006345 	.word	0x08006345
 8006300:	08006379 	.word	0x08006379
 8006304:	080063ad 	.word	0x080063ad
 8006308:	080063e1 	.word	0x080063e1
 800630c:	08006415 	.word	0x08006415
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	7c12      	ldrb	r2, [r2, #16]
 8006328:	f107 0108 	add.w	r1, r7, #8
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
 8006330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006332:	e091      	b.n	8006458 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 facb 	bl	80068d2 <USBD_CtlError>
            err++;
 800633c:	7afb      	ldrb	r3, [r7, #11]
 800633e:	3301      	adds	r3, #1
 8006340:	72fb      	strb	r3, [r7, #11]
          break;
 8006342:	e089      	b.n	8006458 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7c12      	ldrb	r2, [r2, #16]
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006366:	e077      	b.n	8006458 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fab1 	bl	80068d2 <USBD_CtlError>
            err++;
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	3301      	adds	r3, #1
 8006374:	72fb      	strb	r3, [r7, #11]
          break;
 8006376:	e06f      	b.n	8006458 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	7c12      	ldrb	r2, [r2, #16]
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	4610      	mov	r0, r2
 8006396:	4798      	blx	r3
 8006398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639a:	e05d      	b.n	8006458 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa97 	bl	80068d2 <USBD_CtlError>
            err++;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	3301      	adds	r3, #1
 80063a8:	72fb      	strb	r3, [r7, #11]
          break;
 80063aa:	e055      	b.n	8006458 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	7c12      	ldrb	r2, [r2, #16]
 80063c4:	f107 0108 	add.w	r1, r7, #8
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ce:	e043      	b.n	8006458 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa7d 	bl	80068d2 <USBD_CtlError>
            err++;
 80063d8:	7afb      	ldrb	r3, [r7, #11]
 80063da:	3301      	adds	r3, #1
 80063dc:	72fb      	strb	r3, [r7, #11]
          break;
 80063de:	e03b      	b.n	8006458 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	7c12      	ldrb	r2, [r2, #16]
 80063f8:	f107 0108 	add.w	r1, r7, #8
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006402:	e029      	b.n	8006458 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa63 	bl	80068d2 <USBD_CtlError>
            err++;
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	3301      	adds	r3, #1
 8006410:	72fb      	strb	r3, [r7, #11]
          break;
 8006412:	e021      	b.n	8006458 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7c12      	ldrb	r2, [r2, #16]
 800642c:	f107 0108 	add.w	r1, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006436:	e00f      	b.n	8006458 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa49 	bl	80068d2 <USBD_CtlError>
            err++;
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	3301      	adds	r3, #1
 8006444:	72fb      	strb	r3, [r7, #11]
          break;
 8006446:	e007      	b.n	8006458 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa41 	bl	80068d2 <USBD_CtlError>
          err++;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	3301      	adds	r3, #1
 8006454:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006456:	bf00      	nop
      }
      break;
 8006458:	e037      	b.n	80064ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7c1b      	ldrb	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646a:	f107 0208 	add.w	r2, r7, #8
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
 8006472:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006474:	e029      	b.n	80064ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa2a 	bl	80068d2 <USBD_CtlError>
        err++;
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	3301      	adds	r3, #1
 8006482:	72fb      	strb	r3, [r7, #11]
      break;
 8006484:	e021      	b.n	80064ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7c1b      	ldrb	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10d      	bne.n	80064aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	f107 0208 	add.w	r2, r7, #8
 800649a:	4610      	mov	r0, r2
 800649c:	4798      	blx	r3
 800649e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	2207      	movs	r2, #7
 80064a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064a8:	e00f      	b.n	80064ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa10 	bl	80068d2 <USBD_CtlError>
        err++;
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	3301      	adds	r3, #1
 80064b6:	72fb      	strb	r3, [r7, #11]
      break;
 80064b8:	e007      	b.n	80064ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa08 	bl	80068d2 <USBD_CtlError>
      err++;
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	3301      	adds	r3, #1
 80064c6:	72fb      	strb	r3, [r7, #11]
      break;
 80064c8:	bf00      	nop
  }

  if (err != 0U)
 80064ca:	7afb      	ldrb	r3, [r7, #11]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11e      	bne.n	800650e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	88db      	ldrh	r3, [r3, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d016      	beq.n	8006506 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80064d8:	893b      	ldrh	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	88da      	ldrh	r2, [r3, #6]
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bf28      	it	cs
 80064e8:	4613      	movcs	r3, r2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064ee:	893b      	ldrh	r3, [r7, #8]
 80064f0:	461a      	mov	r2, r3
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa69 	bl	80069cc <USBD_CtlSendData>
 80064fa:	e009      	b.n	8006510 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9e7 	bl	80068d2 <USBD_CtlError>
 8006504:	e004      	b.n	8006510 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fac1 	bl	8006a8e <USBD_CtlSendStatus>
 800650c:	e000      	b.n	8006510 <USBD_GetDescriptor+0x2cc>
    return;
 800650e:	bf00      	nop
  }
}
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop

08006518 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	889b      	ldrh	r3, [r3, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d131      	bne.n	800658e <USBD_SetAddress+0x76>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	88db      	ldrh	r3, [r3, #6]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d12d      	bne.n	800658e <USBD_SetAddress+0x76>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	885b      	ldrh	r3, [r3, #2]
 8006536:	2b7f      	cmp	r3, #127	@ 0x7f
 8006538:	d829      	bhi.n	800658e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	885b      	ldrh	r3, [r3, #2]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006544:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b03      	cmp	r3, #3
 8006550:	d104      	bne.n	800655c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f9bc 	bl	80068d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655a:	e01d      	b.n	8006598 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 ff0f 	bl	800738c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa8d 	bl	8006a8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006582:	e009      	b.n	8006598 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658c:	e004      	b.n	8006598 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f99e 	bl	80068d2 <USBD_CtlError>
  }
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	885b      	ldrh	r3, [r3, #2]
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	4b4e      	ldr	r3, [pc, #312]	@ (80066f0 <USBD_SetConfig+0x150>)
 80065b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065b8:	4b4d      	ldr	r3, [pc, #308]	@ (80066f0 <USBD_SetConfig+0x150>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d905      	bls.n	80065cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f985 	bl	80068d2 <USBD_CtlError>
    return USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e08c      	b.n	80066e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d002      	beq.n	80065de <USBD_SetConfig+0x3e>
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d029      	beq.n	8006630 <USBD_SetConfig+0x90>
 80065dc:	e075      	b.n	80066ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80065de:	4b44      	ldr	r3, [pc, #272]	@ (80066f0 <USBD_SetConfig+0x150>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d020      	beq.n	8006628 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80065e6:	4b42      	ldr	r3, [pc, #264]	@ (80066f0 <USBD_SetConfig+0x150>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065f0:	4b3f      	ldr	r3, [pc, #252]	@ (80066f0 <USBD_SetConfig+0x150>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fe ffcd 	bl	8005596 <USBD_SetClassConfig>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d008      	beq.n	8006618 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f962 	bl	80068d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006616:	e065      	b.n	80066e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fa38 	bl	8006a8e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2203      	movs	r2, #3
 8006622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006626:	e05d      	b.n	80066e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa30 	bl	8006a8e <USBD_CtlSendStatus>
      break;
 800662e:	e059      	b.n	80066e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006630:	4b2f      	ldr	r3, [pc, #188]	@ (80066f0 <USBD_SetConfig+0x150>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d112      	bne.n	800665e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006640:	4b2b      	ldr	r3, [pc, #172]	@ (80066f0 <USBD_SetConfig+0x150>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800664a:	4b29      	ldr	r3, [pc, #164]	@ (80066f0 <USBD_SetConfig+0x150>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7fe ffbc 	bl	80055ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa19 	bl	8006a8e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800665c:	e042      	b.n	80066e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800665e:	4b24      	ldr	r3, [pc, #144]	@ (80066f0 <USBD_SetConfig+0x150>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d02a      	beq.n	80066c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7fe ffaa 	bl	80055ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800667a:	4b1d      	ldr	r3, [pc, #116]	@ (80066f0 <USBD_SetConfig+0x150>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006684:	4b1a      	ldr	r3, [pc, #104]	@ (80066f0 <USBD_SetConfig+0x150>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fe ff83 	bl	8005596 <USBD_SetClassConfig>
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00f      	beq.n	80066ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f918 	bl	80068d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fe ff8f 	bl	80055ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066b8:	e014      	b.n	80066e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9e7 	bl	8006a8e <USBD_CtlSendStatus>
      break;
 80066c0:	e010      	b.n	80066e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9e3 	bl	8006a8e <USBD_CtlSendStatus>
      break;
 80066c8:	e00c      	b.n	80066e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f900 	bl	80068d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <USBD_SetConfig+0x150>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fe ff78 	bl	80055ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80066de:	2303      	movs	r3, #3
 80066e0:	73fb      	strb	r3, [r7, #15]
      break;
 80066e2:	bf00      	nop
  }

  return ret;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000164 	.word	0x20000164

080066f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	88db      	ldrh	r3, [r3, #6]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d004      	beq.n	8006710 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f8e2 	bl	80068d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800670e:	e023      	b.n	8006758 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	dc02      	bgt.n	8006722 <USBD_GetConfig+0x2e>
 800671c:	2b00      	cmp	r3, #0
 800671e:	dc03      	bgt.n	8006728 <USBD_GetConfig+0x34>
 8006720:	e015      	b.n	800674e <USBD_GetConfig+0x5a>
 8006722:	2b03      	cmp	r3, #3
 8006724:	d00b      	beq.n	800673e <USBD_GetConfig+0x4a>
 8006726:	e012      	b.n	800674e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3308      	adds	r3, #8
 8006732:	2201      	movs	r2, #1
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f948 	bl	80069cc <USBD_CtlSendData>
        break;
 800673c:	e00c      	b.n	8006758 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3304      	adds	r3, #4
 8006742:	2201      	movs	r2, #1
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f940 	bl	80069cc <USBD_CtlSendData>
        break;
 800674c:	e004      	b.n	8006758 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8be 	bl	80068d2 <USBD_CtlError>
        break;
 8006756:	bf00      	nop
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	2b02      	cmp	r3, #2
 8006776:	d81e      	bhi.n	80067b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	88db      	ldrh	r3, [r3, #6]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d004      	beq.n	800678a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f8a5 	bl	80068d2 <USBD_CtlError>
        break;
 8006788:	e01a      	b.n	80067c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f043 0202 	orr.w	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	330c      	adds	r3, #12
 80067aa:	2202      	movs	r2, #2
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f90c 	bl	80069cc <USBD_CtlSendData>
      break;
 80067b4:	e004      	b.n	80067c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f88a 	bl	80068d2 <USBD_CtlError>
      break;
 80067be:	bf00      	nop
  }
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	885b      	ldrh	r3, [r3, #2]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d107      	bne.n	80067ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f953 	bl	8006a8e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80067e8:	e013      	b.n	8006812 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d10b      	bne.n	800680a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	889b      	ldrh	r3, [r3, #4]
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f943 	bl	8006a8e <USBD_CtlSendStatus>
}
 8006808:	e003      	b.n	8006812 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f860 	bl	80068d2 <USBD_CtlError>
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800682a:	b2db      	uxtb	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	2b02      	cmp	r3, #2
 8006830:	d80b      	bhi.n	800684a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	885b      	ldrh	r3, [r3, #2]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10c      	bne.n	8006854 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f923 	bl	8006a8e <USBD_CtlSendStatus>
      }
      break;
 8006848:	e004      	b.n	8006854 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f840 	bl	80068d2 <USBD_CtlError>
      break;
 8006852:	e000      	b.n	8006856 <USBD_ClrFeature+0x3c>
      break;
 8006854:	bf00      	nop
  }
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff fa3d 	bl	8005d08 <SWAPBYTE>
 800688e:	4603      	mov	r3, r0
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fa30 	bl	8005d08 <SWAPBYTE>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff fa23 	bl	8005d08 <SWAPBYTE>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	80da      	strh	r2, [r3, #6]
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068dc:	2180      	movs	r1, #128	@ 0x80
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fcea 	bl	80072b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068e4:	2100      	movs	r1, #0
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fce6 	bl	80072b8 <USBD_LL_StallEP>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d042      	beq.n	8006990 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800690e:	6938      	ldr	r0, [r7, #16]
 8006910:	f000 f842 	bl	8006998 <USBD_GetLen>
 8006914:	4603      	mov	r3, r0
 8006916:	3301      	adds	r3, #1
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691e:	d808      	bhi.n	8006932 <USBD_GetString+0x3e>
 8006920:	6938      	ldr	r0, [r7, #16]
 8006922:	f000 f839 	bl	8006998 <USBD_GetLen>
 8006926:	4603      	mov	r3, r0
 8006928:	3301      	adds	r3, #1
 800692a:	b29b      	uxth	r3, r3
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	e001      	b.n	8006936 <USBD_GetString+0x42>
 8006932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	4413      	add	r3, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7812      	ldrb	r2, [r2, #0]
 8006944:	701a      	strb	r2, [r3, #0]
  idx++;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	3301      	adds	r3, #1
 800694a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	2203      	movs	r2, #3
 8006954:	701a      	strb	r2, [r3, #0]
  idx++;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	3301      	adds	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800695c:	e013      	b.n	8006986 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	4413      	add	r3, r2
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3301      	adds	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
    idx++;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	3301      	adds	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	4413      	add	r3, r2
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	3301      	adds	r3, #1
 8006984:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e7      	bne.n	800695e <USBD_GetString+0x6a>
 800698e:	e000      	b.n	8006992 <USBD_GetString+0x9e>
    return;
 8006990:	bf00      	nop
  }
}
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069a8:	e005      	b.n	80069b6 <USBD_GetLen+0x1e>
  {
    len++;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	3301      	adds	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f5      	bne.n	80069aa <USBD_GetLen+0x12>
  }

  return len;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2202      	movs	r2, #2
 80069dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	2100      	movs	r1, #0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fce6 	bl	80073ca <USBD_LL_Transmit>

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fcd5 	bl	80073ca <USBD_LL_Transmit>

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fcd5 	bl	800740c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fcc4 	bl	800740c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2204      	movs	r2, #4
 8006a9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fc90 	bl	80073ca <USBD_LL_Transmit>

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2205      	movs	r2, #5
 8006ac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fc9e 	bl	800740c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4912      	ldr	r1, [pc, #72]	@ (8006b2c <MX_USB_DEVICE_Init+0x50>)
 8006ae4:	4812      	ldr	r0, [pc, #72]	@ (8006b30 <MX_USB_DEVICE_Init+0x54>)
 8006ae6:	f7fe fcd9 	bl	800549c <USBD_Init>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006af0:	f7f9 fde8 	bl	80006c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006af4:	490f      	ldr	r1, [pc, #60]	@ (8006b34 <MX_USB_DEVICE_Init+0x58>)
 8006af6:	480e      	ldr	r0, [pc, #56]	@ (8006b30 <MX_USB_DEVICE_Init+0x54>)
 8006af8:	f7fe fd00 	bl	80054fc <USBD_RegisterClass>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b02:	f7f9 fddf 	bl	80006c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b06:	490c      	ldr	r1, [pc, #48]	@ (8006b38 <MX_USB_DEVICE_Init+0x5c>)
 8006b08:	4809      	ldr	r0, [pc, #36]	@ (8006b30 <MX_USB_DEVICE_Init+0x54>)
 8006b0a:	f7fe fbf7 	bl	80052fc <USBD_CDC_RegisterInterface>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b14:	f7f9 fdd6 	bl	80006c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b18:	4805      	ldr	r0, [pc, #20]	@ (8006b30 <MX_USB_DEVICE_Init+0x54>)
 8006b1a:	f7fe fd25 	bl	8005568 <USBD_Start>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b24:	f7f9 fdce 	bl	80006c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b28:	bf00      	nop
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200000ac 	.word	0x200000ac
 8006b30:	20000168 	.word	0x20000168
 8006b34:	20000018 	.word	0x20000018
 8006b38:	20000098 	.word	0x20000098

08006b3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b40:	2200      	movs	r2, #0
 8006b42:	4905      	ldr	r1, [pc, #20]	@ (8006b58 <CDC_Init_FS+0x1c>)
 8006b44:	4805      	ldr	r0, [pc, #20]	@ (8006b5c <CDC_Init_FS+0x20>)
 8006b46:	f7fe fbf3 	bl	8005330 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b4a:	4905      	ldr	r1, [pc, #20]	@ (8006b60 <CDC_Init_FS+0x24>)
 8006b4c:	4803      	ldr	r0, [pc, #12]	@ (8006b5c <CDC_Init_FS+0x20>)
 8006b4e:	f7fe fc11 	bl	8005374 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000844 	.word	0x20000844
 8006b5c:	20000168 	.word	0x20000168
 8006b60:	20000444 	.word	0x20000444

08006b64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
 8006b80:	4613      	mov	r3, r2
 8006b82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	2b23      	cmp	r3, #35	@ 0x23
 8006b88:	d84a      	bhi.n	8006c20 <CDC_Control_FS+0xac>
 8006b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b90 <CDC_Control_FS+0x1c>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006c21 	.word	0x08006c21
 8006b94:	08006c21 	.word	0x08006c21
 8006b98:	08006c21 	.word	0x08006c21
 8006b9c:	08006c21 	.word	0x08006c21
 8006ba0:	08006c21 	.word	0x08006c21
 8006ba4:	08006c21 	.word	0x08006c21
 8006ba8:	08006c21 	.word	0x08006c21
 8006bac:	08006c21 	.word	0x08006c21
 8006bb0:	08006c21 	.word	0x08006c21
 8006bb4:	08006c21 	.word	0x08006c21
 8006bb8:	08006c21 	.word	0x08006c21
 8006bbc:	08006c21 	.word	0x08006c21
 8006bc0:	08006c21 	.word	0x08006c21
 8006bc4:	08006c21 	.word	0x08006c21
 8006bc8:	08006c21 	.word	0x08006c21
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006c21 	.word	0x08006c21
 8006bd4:	08006c21 	.word	0x08006c21
 8006bd8:	08006c21 	.word	0x08006c21
 8006bdc:	08006c21 	.word	0x08006c21
 8006be0:	08006c21 	.word	0x08006c21
 8006be4:	08006c21 	.word	0x08006c21
 8006be8:	08006c21 	.word	0x08006c21
 8006bec:	08006c21 	.word	0x08006c21
 8006bf0:	08006c21 	.word	0x08006c21
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	08006c21 	.word	0x08006c21
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c21 	.word	0x08006c21
 8006c04:	08006c21 	.word	0x08006c21
 8006c08:	08006c21 	.word	0x08006c21
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c21 	.word	0x08006c21
 8006c18:	08006c21 	.word	0x08006c21
 8006c1c:	08006c21 	.word	0x08006c21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c20:	bf00      	nop
  }

  return (USBD_OK);
 8006c22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4805      	ldr	r0, [pc, #20]	@ (8006c54 <CDC_Receive_FS+0x24>)
 8006c3e:	f7fe fb99 	bl	8005374 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c42:	4804      	ldr	r0, [pc, #16]	@ (8006c54 <CDC_Receive_FS+0x24>)
 8006c44:	f7fe fbf4 	bl	8005430 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000168 	.word	0x20000168

08006c58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c68:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <CDC_Transmit_FS+0x48>)
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e00b      	b.n	8006c96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c7e:	887b      	ldrh	r3, [r7, #2]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	4806      	ldr	r0, [pc, #24]	@ (8006ca0 <CDC_Transmit_FS+0x48>)
 8006c86:	f7fe fb53 	bl	8005330 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c8a:	4805      	ldr	r0, [pc, #20]	@ (8006ca0 <CDC_Transmit_FS+0x48>)
 8006c8c:	f7fe fb90 	bl	80053b0 <USBD_CDC_TransmitPacket>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000168 	.word	0x20000168

08006ca4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	6039      	str	r1, [r7, #0]
 8006cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2212      	movs	r2, #18
 8006cd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cda:	4b03      	ldr	r3, [pc, #12]	@ (8006ce8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	200000c8 	.word	0x200000c8

08006cec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cfe:	4b03      	ldr	r3, [pc, #12]	@ (8006d0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	200000dc 	.word	0x200000dc

08006d10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4907      	ldr	r1, [pc, #28]	@ (8006d44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d26:	4808      	ldr	r0, [pc, #32]	@ (8006d48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d28:	f7ff fde4 	bl	80068f4 <USBD_GetString>
 8006d2c:	e004      	b.n	8006d38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4904      	ldr	r1, [pc, #16]	@ (8006d44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d32:	4805      	ldr	r0, [pc, #20]	@ (8006d48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d34:	f7ff fdde 	bl	80068f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d38:	4b02      	ldr	r3, [pc, #8]	@ (8006d44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000c44 	.word	0x20000c44
 8006d48:	0800757c 	.word	0x0800757c

08006d4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	6039      	str	r1, [r7, #0]
 8006d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4904      	ldr	r1, [pc, #16]	@ (8006d6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d5c:	4804      	ldr	r0, [pc, #16]	@ (8006d70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d5e:	f7ff fdc9 	bl	80068f4 <USBD_GetString>
  return USBD_StrDesc;
 8006d62:	4b02      	ldr	r3, [pc, #8]	@ (8006d6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20000c44 	.word	0x20000c44
 8006d70:	08007594 	.word	0x08007594

08006d74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	221a      	movs	r2, #26
 8006d84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d86:	f000 f843 	bl	8006e10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d8a:	4b02      	ldr	r3, [pc, #8]	@ (8006d94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200000e0 	.word	0x200000e0

08006d98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	6039      	str	r1, [r7, #0]
 8006da2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d105      	bne.n	8006db6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4907      	ldr	r1, [pc, #28]	@ (8006dcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dae:	4808      	ldr	r0, [pc, #32]	@ (8006dd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006db0:	f7ff fda0 	bl	80068f4 <USBD_GetString>
 8006db4:	e004      	b.n	8006dc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4904      	ldr	r1, [pc, #16]	@ (8006dcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dba:	4805      	ldr	r0, [pc, #20]	@ (8006dd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dbc:	f7ff fd9a 	bl	80068f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dc0:	4b02      	ldr	r3, [pc, #8]	@ (8006dcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000c44 	.word	0x20000c44
 8006dd0:	080075a8 	.word	0x080075a8

08006dd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4907      	ldr	r1, [pc, #28]	@ (8006e08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dea:	4808      	ldr	r0, [pc, #32]	@ (8006e0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dec:	f7ff fd82 	bl	80068f4 <USBD_GetString>
 8006df0:	e004      	b.n	8006dfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4904      	ldr	r1, [pc, #16]	@ (8006e08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006df6:	4805      	ldr	r0, [pc, #20]	@ (8006e0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006df8:	f7ff fd7c 	bl	80068f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dfc:	4b02      	ldr	r3, [pc, #8]	@ (8006e08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000c44 	.word	0x20000c44
 8006e0c:	080075b4 	.word	0x080075b4

08006e10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e16:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <Get_SerialNum+0x44>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <Get_SerialNum+0x48>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e22:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <Get_SerialNum+0x4c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e36:	2208      	movs	r2, #8
 8006e38:	4909      	ldr	r1, [pc, #36]	@ (8006e60 <Get_SerialNum+0x50>)
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f814 	bl	8006e68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e40:	2204      	movs	r2, #4
 8006e42:	4908      	ldr	r1, [pc, #32]	@ (8006e64 <Get_SerialNum+0x54>)
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f000 f80f 	bl	8006e68 <IntToUnicode>
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	1fff7a10 	.word	0x1fff7a10
 8006e58:	1fff7a14 	.word	0x1fff7a14
 8006e5c:	1fff7a18 	.word	0x1fff7a18
 8006e60:	200000e2 	.word	0x200000e2
 8006e64:	200000f2 	.word	0x200000f2

08006e68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
 8006e7e:	e027      	b.n	8006ed0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	0f1b      	lsrs	r3, r3, #28
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d80b      	bhi.n	8006ea0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0f1b      	lsrs	r3, r3, #28
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4619      	mov	r1, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	440b      	add	r3, r1
 8006e98:	3230      	adds	r2, #48	@ 0x30
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e00a      	b.n	8006eb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	0f1b      	lsrs	r3, r3, #28
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	440b      	add	r3, r1
 8006eb0:	3237      	adds	r2, #55	@ 0x37
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
 8006ed0:	7dfa      	ldrb	r2, [r7, #23]
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3d3      	bcc.n	8006e80 <IntToUnicode+0x18>
  }
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08a      	sub	sp, #40	@ 0x28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ef0:	f107 0314 	add.w	r3, r7, #20
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	609a      	str	r2, [r3, #8]
 8006efc:	60da      	str	r2, [r3, #12]
 8006efe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f08:	d13a      	bne.n	8006f80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f12:	4a1d      	ldr	r2, [pc, #116]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f14:	f043 0301 	orr.w	r3, r3, #1
 8006f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f34:	2303      	movs	r3, #3
 8006f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f38:	230a      	movs	r3, #10
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	4619      	mov	r1, r3
 8006f42:	4812      	ldr	r0, [pc, #72]	@ (8006f8c <HAL_PCD_MspInit+0xa4>)
 8006f44:	f7f9 fe52 	bl	8000bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f52:	6353      	str	r3, [r2, #52]	@ 0x34
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f62:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f64:	4b08      	ldr	r3, [pc, #32]	@ (8006f88 <HAL_PCD_MspInit+0xa0>)
 8006f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f70:	2200      	movs	r2, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	2043      	movs	r0, #67	@ 0x43
 8006f76:	f7f9 fe02 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f7a:	2043      	movs	r0, #67	@ 0x43
 8006f7c:	f7f9 fe1b 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f80:	bf00      	nop
 8006f82:	3728      	adds	r7, #40	@ 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40020000 	.word	0x40020000

08006f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f7fe fb2b 	bl	8005602 <USBD_LL_SetupStage>
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f7fe fb65 	bl	80056ac <USBD_LL_DataOutStage>
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	3320      	adds	r3, #32
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	4619      	mov	r1, r3
 8007012:	f7fe fc07 	bl	8005824 <USBD_LL_DataInStage>
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fd4b 	bl	8005ac8 <USBD_LL_SOF>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007042:	2301      	movs	r3, #1
 8007044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	79db      	ldrb	r3, [r3, #7]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d001      	beq.n	8007052 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800704e:	f7f9 fb39 	bl	80006c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007058:	7bfa      	ldrb	r2, [r7, #15]
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fcef 	bl	8005a40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fc96 	bl	800599a <USBD_LL_Reset>
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fcea 	bl	8005a60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7adb      	ldrb	r3, [r3, #11]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070ac:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <HAL_PCD_SuspendCallback+0x48>)
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	4a03      	ldr	r2, [pc, #12]	@ (80070c0 <HAL_PCD_SuspendCallback+0x48>)
 80070b2:	f043 0306 	orr.w	r3, r3, #6
 80070b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fce0 	bl	8005a98 <USBD_LL_Resume>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	4611      	mov	r1, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fd38 	bl	8005b6c <USBD_LL_IsoOUTIncomplete>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	4611      	mov	r1, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fcf4 	bl	8005b08 <USBD_LL_IsoINIncomplete>
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe fd4a 	bl	8005bd0 <USBD_LL_DevConnected>
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fd47 	bl	8005be6 <USBD_LL_DevDisconnected>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d13c      	bne.n	80071ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007170:	4a20      	ldr	r2, [pc, #128]	@ (80071f4 <USBD_LL_Init+0x94>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a1e      	ldr	r2, [pc, #120]	@ (80071f4 <USBD_LL_Init+0x94>)
 800717c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007180:	4b1c      	ldr	r3, [pc, #112]	@ (80071f4 <USBD_LL_Init+0x94>)
 8007182:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007186:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007188:	4b1a      	ldr	r3, [pc, #104]	@ (80071f4 <USBD_LL_Init+0x94>)
 800718a:	2204      	movs	r2, #4
 800718c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800718e:	4b19      	ldr	r3, [pc, #100]	@ (80071f4 <USBD_LL_Init+0x94>)
 8007190:	2202      	movs	r2, #2
 8007192:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007194:	4b17      	ldr	r3, [pc, #92]	@ (80071f4 <USBD_LL_Init+0x94>)
 8007196:	2200      	movs	r2, #0
 8007198:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800719a:	4b16      	ldr	r3, [pc, #88]	@ (80071f4 <USBD_LL_Init+0x94>)
 800719c:	2202      	movs	r2, #2
 800719e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071a0:	4b14      	ldr	r3, [pc, #80]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071a6:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071ac:	4b11      	ldr	r3, [pc, #68]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80071b2:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071b8:	4b0e      	ldr	r3, [pc, #56]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071be:	480d      	ldr	r0, [pc, #52]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071c0:	f7f9 fe98 	bl	8000ef4 <HAL_PCD_Init>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80071ca:	f7f9 fa7b 	bl	80006c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80071ce:	2180      	movs	r1, #128	@ 0x80
 80071d0:	4808      	ldr	r0, [pc, #32]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071d2:	f7fb f8c4 	bl	800235e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80071d6:	2240      	movs	r2, #64	@ 0x40
 80071d8:	2100      	movs	r1, #0
 80071da:	4806      	ldr	r0, [pc, #24]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071dc:	f7fb f878 	bl	80022d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80071e0:	2280      	movs	r2, #128	@ 0x80
 80071e2:	2101      	movs	r1, #1
 80071e4:	4803      	ldr	r0, [pc, #12]	@ (80071f4 <USBD_LL_Init+0x94>)
 80071e6:	f7fb f873 	bl	80022d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000e44 	.word	0x20000e44

080071f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800720e:	4618      	mov	r0, r3
 8007210:	f7f9 ff7f 	bl	8001112 <HAL_PCD_Start>
 8007214:	4603      	mov	r3, r0
 8007216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f942 	bl	80074a4 <USBD_Get_USB_Status>
 8007220:	4603      	mov	r3, r0
 8007222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007224:	7bbb      	ldrb	r3, [r7, #14]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	4608      	mov	r0, r1
 8007238:	4611      	mov	r1, r2
 800723a:	461a      	mov	r2, r3
 800723c:	4603      	mov	r3, r0
 800723e:	70fb      	strb	r3, [r7, #3]
 8007240:	460b      	mov	r3, r1
 8007242:	70bb      	strb	r3, [r7, #2]
 8007244:	4613      	mov	r3, r2
 8007246:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007256:	78bb      	ldrb	r3, [r7, #2]
 8007258:	883a      	ldrh	r2, [r7, #0]
 800725a:	78f9      	ldrb	r1, [r7, #3]
 800725c:	f7fa fc53 	bl	8001b06 <HAL_PCD_EP_Open>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f91c 	bl	80074a4 <USBD_Get_USB_Status>
 800726c:	4603      	mov	r3, r0
 800726e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007270:	7bbb      	ldrb	r3, [r7, #14]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4611      	mov	r1, r2
 8007298:	4618      	mov	r0, r3
 800729a:	f7fa fc9e 	bl	8001bda <HAL_PCD_EP_Close>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f8fd 	bl	80074a4 <USBD_Get_USB_Status>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fa fd56 	bl	8001d88 <HAL_PCD_EP_SetStall>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f8de 	bl	80074a4 <USBD_Get_USB_Status>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007310:	78fa      	ldrb	r2, [r7, #3]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f7fa fd9a 	bl	8001e4e <HAL_PCD_EP_ClrStall>
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f8bf 	bl	80074a4 <USBD_Get_USB_Status>
 8007326:	4603      	mov	r3, r0
 8007328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800732a:	7bbb      	ldrb	r3, [r7, #14]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007346:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800734c:	2b00      	cmp	r3, #0
 800734e:	da0b      	bge.n	8007368 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	3316      	adds	r3, #22
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	e00b      	b.n	8007380 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	4613      	mov	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800737e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fa fb87 	bl	8001abe <HAL_PCD_SetAddress>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 f874 	bl	80074a4 <USBD_Get_USB_Status>
 80073bc:	4603      	mov	r3, r0
 80073be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
 80073d6:	460b      	mov	r3, r1
 80073d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073e8:	7af9      	ldrb	r1, [r7, #11]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f7fa fc91 	bl	8001d14 <HAL_PCD_EP_Transmit>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f853 	bl	80074a4 <USBD_Get_USB_Status>
 80073fe:	4603      	mov	r3, r0
 8007400:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007402:	7dbb      	ldrb	r3, [r7, #22]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	460b      	mov	r3, r1
 800741a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800742a:	7af9      	ldrb	r1, [r7, #11]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	f7fa fc1d 	bl	8001c6e <HAL_PCD_EP_Receive>
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f832 	bl	80074a4 <USBD_Get_USB_Status>
 8007440:	4603      	mov	r3, r0
 8007442:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007444:	7dbb      	ldrb	r3, [r7, #22]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f7fa fc3d 	bl	8001ce4 <HAL_PCD_EP_GetRxCount>
 800746a:	4603      	mov	r3, r0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800747c:	4b03      	ldr	r3, [pc, #12]	@ (800748c <USBD_static_malloc+0x18>)
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20001328 	.word	0x20001328

08007490 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]

}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d817      	bhi.n	80074e8 <USBD_Get_USB_Status+0x44>
 80074b8:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <USBD_Get_USB_Status+0x1c>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074d7 	.word	0x080074d7
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	080074e3 	.word	0x080074e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
    break;
 80074d4:	e00b      	b.n	80074ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074d6:	2303      	movs	r3, #3
 80074d8:	73fb      	strb	r3, [r7, #15]
    break;
 80074da:	e008      	b.n	80074ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
    break;
 80074e0:	e005      	b.n	80074ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074e2:	2303      	movs	r3, #3
 80074e4:	73fb      	strb	r3, [r7, #15]
    break;
 80074e6:	e002      	b.n	80074ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	73fb      	strb	r3, [r7, #15]
    break;
 80074ec:	bf00      	nop
  }
  return usb_status;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <memset>:
 80074fc:	4402      	add	r2, r0
 80074fe:	4603      	mov	r3, r0
 8007500:	4293      	cmp	r3, r2
 8007502:	d100      	bne.n	8007506 <memset+0xa>
 8007504:	4770      	bx	lr
 8007506:	f803 1b01 	strb.w	r1, [r3], #1
 800750a:	e7f9      	b.n	8007500 <memset+0x4>

0800750c <__libc_init_array>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	4d0d      	ldr	r5, [pc, #52]	@ (8007544 <__libc_init_array+0x38>)
 8007510:	4c0d      	ldr	r4, [pc, #52]	@ (8007548 <__libc_init_array+0x3c>)
 8007512:	1b64      	subs	r4, r4, r5
 8007514:	10a4      	asrs	r4, r4, #2
 8007516:	2600      	movs	r6, #0
 8007518:	42a6      	cmp	r6, r4
 800751a:	d109      	bne.n	8007530 <__libc_init_array+0x24>
 800751c:	4d0b      	ldr	r5, [pc, #44]	@ (800754c <__libc_init_array+0x40>)
 800751e:	4c0c      	ldr	r4, [pc, #48]	@ (8007550 <__libc_init_array+0x44>)
 8007520:	f000 f818 	bl	8007554 <_init>
 8007524:	1b64      	subs	r4, r4, r5
 8007526:	10a4      	asrs	r4, r4, #2
 8007528:	2600      	movs	r6, #0
 800752a:	42a6      	cmp	r6, r4
 800752c:	d105      	bne.n	800753a <__libc_init_array+0x2e>
 800752e:	bd70      	pop	{r4, r5, r6, pc}
 8007530:	f855 3b04 	ldr.w	r3, [r5], #4
 8007534:	4798      	blx	r3
 8007536:	3601      	adds	r6, #1
 8007538:	e7ee      	b.n	8007518 <__libc_init_array+0xc>
 800753a:	f855 3b04 	ldr.w	r3, [r5], #4
 800753e:	4798      	blx	r3
 8007540:	3601      	adds	r6, #1
 8007542:	e7f2      	b.n	800752a <__libc_init_array+0x1e>
 8007544:	080075e4 	.word	0x080075e4
 8007548:	080075e4 	.word	0x080075e4
 800754c:	080075e4 	.word	0x080075e4
 8007550:	080075e8 	.word	0x080075e8

08007554 <_init>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	bf00      	nop
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr

08007560 <_fini>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	bf00      	nop
 8007564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007566:	bc08      	pop	{r3}
 8007568:	469e      	mov	lr, r3
 800756a:	4770      	bx	lr
